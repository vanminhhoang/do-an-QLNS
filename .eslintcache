[{"C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\reactRedux\\ReduxSt.js":"1","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\index.js":"2","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\Route\\router.js":"3","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\reactRedux\\ReduxRe.js":"4","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\QuenMatKhau\\QuenMatKhau.js":"5","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\DangNhap\\DangNhap.js":"6","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\DoiMatKhau\\DoiMatKhau.js":"7","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\MainActivity\\MainActivity.js":"8","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\LayLaiMatKhau\\LayLaiMatKhau.js":"9","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\component\\BaoCaoTienDo\\BaoCaoTienDo.js":"10","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\reactRedux\\ReduxAc.js":"11","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\component\\TitleForm\\TitleForm.js":"12","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\component\\ButtonForm\\ButtonForm.js":"13","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\component\\InputText\\InputText.js":"14","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\component\\Modal\\ModalWL.js":"15","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\Theme\\theme.js":"16","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\Theme\\global.js":"17","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\component\\HeaderDashboard\\HeaderDashboard.js":"18","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\MainActivity\\Chil_Screens\\PhanCongNhanVien.js":"19","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\MainActivity\\Chil_Screens\\DSHoanThanhCongTrinh.js":"20","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\MainActivity\\Chil_Screens\\ChiTietNhanVien.js":"21","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\MainActivity\\Chil_Screens\\TienDoCongTrinh\\Child_Screen\\ChiTietTienDoCongTrinh.js":"22","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\MainActivity\\Chil_Screens\\TienDoCongTrinh\\TienDoCongTrinh.js":"23","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\MainActivity\\Chil_Screens\\DanhSachCongTrinh.js":"24","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\component\\TextForm\\TextForm.js":"25","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\MainActivity\\Chil_Screens\\BangLuong.js":"26","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\regex\\regexValidated.js":"27","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\api\\pushNotify.js":"28","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\MainActivity\\Chil_Screens\\DanhSachNhanVien.js":"29","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\serviceWorker.js":"30","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\component\\SectionDashboard\\SectionDashboard.js":"31"},{"size":121,"mtime":1607017393360,"results":"32","hashOfConfig":"33"},{"size":741,"mtime":1607019643655,"results":"34","hashOfConfig":"33"},{"size":1128,"mtime":1609906745817,"results":"35","hashOfConfig":"33"},{"size":1007,"mtime":1607017382758,"results":"36","hashOfConfig":"33"},{"size":3293,"mtime":1607224818765,"results":"37","hashOfConfig":"33"},{"size":4934,"mtime":1607225156804,"results":"38","hashOfConfig":"33"},{"size":4133,"mtime":1609988772391,"results":"39","hashOfConfig":"33"},{"size":5957,"mtime":1607182457722,"results":"40","hashOfConfig":"33"},{"size":1466,"mtime":1607224809577,"results":"41","hashOfConfig":"33"},{"size":4540,"mtime":1609910293558,"results":"42","hashOfConfig":"33"},{"size":132,"mtime":1607017099646,"results":"43","hashOfConfig":"33"},{"size":217,"mtime":1606709011299,"results":"44","hashOfConfig":"33"},{"size":7954,"mtime":1609988432142,"results":"45","hashOfConfig":"33"},{"size":512,"mtime":1609916236709,"results":"46","hashOfConfig":"33"},{"size":1949,"mtime":1606799289303,"results":"47","hashOfConfig":"33"},{"size":376,"mtime":1606709011277,"results":"48","hashOfConfig":"33"},{"size":2048,"mtime":1606709011277,"results":"49","hashOfConfig":"33"},{"size":9851,"mtime":1607017953783,"results":"50","hashOfConfig":"33"},{"size":21095,"mtime":1609991994650,"results":"51","hashOfConfig":"33"},{"size":7017,"mtime":1607446347057,"results":"52","hashOfConfig":"33"},{"size":25602,"mtime":1609990189860,"results":"53","hashOfConfig":"33"},{"size":5891,"mtime":1606709011306,"results":"54","hashOfConfig":"33"},{"size":12447,"mtime":1609909442448,"results":"55","hashOfConfig":"33"},{"size":31691,"mtime":1609930902004,"results":"56","hashOfConfig":"33"},{"size":351,"mtime":1606709011296,"results":"57","hashOfConfig":"33"},{"size":9009,"mtime":1609991988348,"results":"58","hashOfConfig":"33"},{"size":1005,"mtime":1607017048300,"results":"59","hashOfConfig":"33"},{"size":750,"mtime":1607188282305,"results":"60","hashOfConfig":"33"},{"size":28095,"mtime":1609988213485,"results":"61","hashOfConfig":"33"},{"size":5227,"mtime":1606709011316,"results":"62","hashOfConfig":"33"},{"size":23174,"mtime":1607480983887,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"1iijdtt",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"69"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"69"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"69"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"77"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"77"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"77"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"77"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"77"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"96"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"77"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"96"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"77"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"96"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"96"},"C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\reactRedux\\ReduxSt.js",[],["150","151"],"C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\index.js",[],["152","153"],"C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\Route\\router.js",["154","155"],"import React from 'react'\r\n\r\n//import BrowserRouter as Router when run reactjs\r\n//import HashRouter as Router when run electron\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport { useSelector } from 'react-redux'\r\n\r\n// import components\r\nimport DangNhap from '../DangNhap/DangNhap'\r\nimport ForgotPassword from '../QuenMatKhau/QuenMatKhau'\r\nimport ResetPassword from '../LayLaiMatKhau/LayLaiMatKhau'\r\nimport ChangePassword from '../DoiMatKhau/DoiMatKhau'\r\nimport Dashboard from '../MainActivity/MainActivity'\r\nimport BaoCaoTienDo from '../../component/BaoCaoTienDo/BaoCaoTienDo'\r\n\r\nfunction RouterApp() {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route path=\"/\" exact component={DangNhap} />\r\n                <Route path=\"/ForgotPassword\" component={ForgotPassword} />\r\n                <Route path=\"/ChangePassword\" component={ChangePassword} />\r\n                <Route path=\"/ResetPassword\" component={ResetPassword} />\r\n                <Route path=\"/Dashboard\" component={Dashboard} />\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default RouterApp\r\n","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\reactRedux\\ReduxRe.js",[],"C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\QuenMatKhau\\QuenMatKhau.js",[],["156","157"],"C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\DangNhap\\DangNhap.js",["158","159","160","161","162","163"],"import React, { useState, useEffect } from 'react'\r\nimport '../FormStyle/css/FormStyle.css'\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\r\n\r\n//import components react bootstrap\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\n// import components\r\nimport TitleForm from '../../component/TitleForm/TitleForm'\r\nimport InputText from '../../component/InputText/InputText'\r\nimport ButtonForm from '../../component/ButtonForm/ButtonForm'\r\nimport TextForm from '../../component/TextForm/TextForm'\r\nimport ModalWL from '../../component/Modal/ModalWL'\r\n\r\nvar srcImg = [\r\n    require('../../resource/HinhAnh/huongDan.jpg'),\r\n    // require('../../resource/HinhAnh/huongDan.jpg'),\r\n]\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    tutorial: {\r\n        width: '100%',\r\n        cursor: 'pointer',\r\n        color: 'gray',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        marginTop: '180px',\r\n        color: '#04c3c3',\r\n\r\n        '&:hover': {\r\n            color: '#33aef5',\r\n        },\r\n    },\r\n}))\r\n\r\nfunction Login() {\r\n    const styleFlex = {\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-end',\r\n        paddingTop: 0,\r\n    }\r\n\r\n    const [inputContentText, setInputContentNumber] = useState()\r\n    const [inputContentPassword, setInputContentPassword] = useState()\r\n    const [showMessLogin, setShowMessLogin] = useState(true)\r\n    const [loading, setLoading] = useState(false)\r\n    const [show, setShow] = useState(false)\r\n\r\n    const classes = useStyles()\r\n\r\n    useEffect(() => {\r\n        // Nếu đăng nhập rồi không cho quay lại trang login\r\n        if (sessionStorage.getItem('info')) {\r\n            var host = window.location.href\r\n            window.location.href = host.concat('Dashboard')\r\n            return\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {loading ? (\r\n                <div\r\n                    style={{\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        zIndex: '30',\r\n                        position: 'absolute',\r\n                        display: 'flex',\r\n                        justifyContent: 'center',\r\n                        alignItems: 'center',\r\n                    }}\r\n                >\r\n                    <Spinner animation=\"border\" role=\"status\" />\r\n                </div>\r\n            ) : (\r\n                <div></div>\r\n            )}\r\n            <div className=\"form\">\r\n                <TitleForm title=\"QUẢN LÍ LAO ĐỘNG\" />\r\n                {showMessLogin ? (\r\n                    <div></div>\r\n                ) : (\r\n                    <Alert\r\n                        variant=\"danger\"\r\n                        onClose={() => setShowMessLogin(true)}\r\n                        dismissible\r\n                    >\r\n                        Sai Tài Khoản Hoặc Mật Khẩu, Vui Lòng Nhập Lại!\r\n                    </Alert>\r\n                )}\r\n                <form className=\"form-content\">\r\n                    <InputText\r\n                        type=\"number\"\r\n                        placeholder=\"Số điện thoại\"\r\n                        setInputContent={setInputContentNumber}\r\n                    />\r\n                    <InputText\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        setInputContent={setInputContentPassword}\r\n                    />\r\n                    <TextForm\r\n                        text=\"Forgot\"\r\n                        text_link=\"Username / Password?\"\r\n                        style={styleFlex}\r\n                        link=\"/ForgotPassword\"\r\n                    />\r\n                    <ButtonForm\r\n                        btnText=\"Đăng Nhập\"\r\n                        link=\"/Dashboard\"\r\n                        feature=\"login\"\r\n                        loading={setLoading}\r\n                        setIsLogin={setShowMessLogin}\r\n                        inputSDT={inputContentText}\r\n                        inputPass={inputContentPassword}\r\n                    />\r\n                </form>\r\n                <div className={classes.tutorial}>\r\n                    <p\r\n                        onClick={() => {\r\n                            setShow(true)\r\n                        }}\r\n                    >\r\n                        Hướng dẫn sử dụng\r\n                    </p>\r\n                </div>\r\n            </div>\r\n\r\n            <ModalWL\r\n                show={show}\r\n                setShow={setShow}\r\n                header={'Hướng dẫn sử dụng'}\r\n                srcImg={srcImg}\r\n                heightImg=\"450px\"\r\n                widthImg=\"100%\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\DoiMatKhau\\DoiMatKhau.js",["164","165","166","167"],"import React, { useRef, useState } from 'react'\r\n\r\n// import components\r\nimport TitleForm from '../../component/TitleForm/TitleForm'\r\nimport InputText from '../../component/InputText/InputText'\r\nimport ButtonForm from '../../component/ButtonForm/ButtonForm'\r\nimport TextForm from '../../component/TextForm/TextForm'\r\n\r\nimport { Link, useHistory } from 'react-router-dom'\r\n\r\n//import icon material\r\nimport Spinner from 'react-bootstrap/Spinner'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Alert from '@material-ui/lab/Alert'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    iconLoad: {\r\n        position: 'absolute',\r\n        minHeight: '500px',\r\n        right: '0',\r\n        left: '0',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        zIndex: '15',\r\n    },\r\n}))\r\n\r\nfunction ChangePassword() {\r\n    const styleFlex = {\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-end',\r\n        paddingTop: 0,\r\n    }\r\n\r\n    const [pass, setPass] = useState()\r\n    const [newPass, setNewPass] = useState()\r\n    const [newPassAgain, setNewPassAgain] = useState()\r\n\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const [showMess, setShowMess] = useState(false)\r\n    const [textMess, setTextMess] = useState('')\r\n\r\n    const classes = useStyles()\r\n    const history = useHistory()\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {loading ? (\r\n                <div className={classes.iconLoad}>\r\n                    <Spinner animation=\"border\" />\r\n                </div>\r\n            ) : (\r\n                <div></div>\r\n            )}\r\n            <Snackbar\r\n                open={showMess}\r\n                autoHideDuration={3000}\r\n                onClose={() => {\r\n                    setShowMess(false)\r\n                }}\r\n            >\r\n                <Alert\r\n                    onClose={() => {\r\n                        setShowMess(false)\r\n                    }}\r\n                    severity=\"error\"\r\n                >\r\n                    {textMess}\r\n                </Alert>\r\n            </Snackbar>\r\n            <div className=\"form\">\r\n                <TitleForm title=\"Change Password\" />\r\n                <form className=\"form-content\">\r\n                    <InputText\r\n                        type=\"password\"\r\n                        placeholder=\"Nhập mật khẩu củ\"\r\n                        setInputContent={setPass}\r\n                    />\r\n                    <InputText\r\n                        type=\"password\"\r\n                        placeholder=\"Nhập mật khẩu mới\"\r\n                        setInputContent={setNewPass}\r\n                    />\r\n                    <InputText\r\n                        type=\"password\"\r\n                        placeholder=\"Xác nhận lại mật khẩu\"\r\n                        setInputContent={setNewPassAgain}\r\n                    />\r\n\r\n                    <ButtonForm\r\n                        btnText=\"Lưu\"\r\n                        link=\"/Dashboard\"\r\n                        feature=\"changePassword\"\r\n                        pass={pass}\r\n                        newPass={newPass}\r\n                        newPassAgain={newPassAgain}\r\n                        setLoading={setLoading}\r\n                        setShowMess={setShowMess}\r\n                        setTextMess={setTextMess}\r\n                    />\r\n                    <Button\r\n                        variant=\"outline-secondary\"\r\n                        style={{\r\n                            width: '100px',\r\n                            alignSelf: 'center',\r\n                            marginTop: '100px',\r\n                            fontWeight: '600',\r\n                        }}\r\n                        onClick={() => {\r\n                            history.push('/Dashboard')\r\n                        }}\r\n                    >\r\n                        Quay Lại\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChangePassword\r\n","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\MainActivity\\MainActivity.js",["168","169","170","171","172","173","174"],"import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route,\r\n    useHistory,\r\n} from 'react-router-dom'\r\n\r\nimport { DARK_LIGHT_MODE } from '../../reactRedux/ReduxAc'\r\n\r\n// dark mode\r\nimport { ThemeProvider } from 'styled-components'\r\nimport { lightTheme, darkTheme } from '../../Theme/theme'\r\nimport { GlobalStyles } from '../../Theme/global'\r\n\r\n//import component\r\nimport HeaderDashboard from '../../component/HeaderDashboard/HeaderDashboard'\r\nimport SectionDashboard from '../../component/SectionDashboard/SectionDashboard'\r\n\r\nimport PhanCongNhanVien from './Chil_Screens/PhanCongNhanVien'\r\nimport TienDoCongTrinh from './Chil_Screens/TienDoCongTrinh/TienDoCongTrinh'\r\nimport ChiTietTienDoCongTrinh from './Chil_Screens/TienDoCongTrinh/Child_Screen/ChiTietTienDoCongTrinh'\r\nimport ChiTietNhanVien from './Chil_Screens/ChiTietNhanVien'\r\nimport DanhSachCongTrinh from './Chil_Screens/DanhSachCongTrinh'\r\nimport DanhSachNhanVien from './Chil_Screens/DanhSachNhanVien'\r\nimport DSHoanThanhCongTrinh from './Chil_Screens/DSHoanThanhCongTrinh'\r\nimport BangLuong from './Chil_Screens/BangLuong'\r\n\r\n//import icon material\r\nimport Brightness2Icon from '@material-ui/icons/Brightness2'\r\nimport WbSunnyIcon from '@material-ui/icons/WbSunny'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    iconDarkMode: {\r\n        position: 'fixed',\r\n        width: '60px',\r\n        height: '60px',\r\n        borderRadius: '50%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        top: '83%',\r\n        left: '90%',\r\n        fontSize: '50px',\r\n        cursor: 'pointer',\r\n        zIndex: '1',\r\n        transition: 'all 0.2s linear',\r\n\r\n        '&:hover': {\r\n            backgroundColor: 'rgba(0, 0, 0, 0.3)',\r\n        },\r\n    },\r\n}))\r\n\r\nfunction Dashboard() {\r\n    const history = useHistory()\r\n\r\n    const isDarkMode = useSelector((state) => state.isDarkMode)\r\n    const dispatch = useDispatch()\r\n\r\n    const classes = useStyles()\r\n    // Nếu chưa đăng nhập không cho vào trang chủ\r\n    if (!sessionStorage.getItem('info')) {\r\n        var host = window.location.href\r\n        host = host.slice(0, host.indexOf('#'))\r\n        window.location.href = host\r\n        return\r\n    }\r\n\r\n    return (\r\n        <ThemeProvider theme={isDarkMode ? lightTheme : darkTheme}>\r\n            <GlobalStyles />\r\n            <Router>\r\n                <div\r\n                    style={{\r\n                        width: '100%',\r\n                        minHeight: '100vh',\r\n                        position: 'relative',\r\n                        // backgroundColor: '#e7ecf0',\r\n                    }}\r\n                >\r\n                    <HeaderDashboard />\r\n\r\n                    <Switch>\r\n                        <Route\r\n                            exact\r\n                            path=\"/Dashboard/\"\r\n                            component={SectionDashboard}\r\n                        />\r\n                        <Route\r\n                            path=\"/Dashboard/PhanCongNhanVien\"\r\n                            component={PhanCongNhanVien}\r\n                        />\r\n                        <Route\r\n                            path=\"/Dashboard/ChiTietNhanVien\"\r\n                            component={ChiTietNhanVien}\r\n                        />\r\n\r\n                        <Route\r\n                            exact\r\n                            path=\"/Dashboard/TienDoCongTrinh\"\r\n                            component={TienDoCongTrinh}\r\n                        />\r\n                        <Route\r\n                            path=\"/Dashboard/TienDoCongTrinh/ChiTietTienDoCongTrinh\"\r\n                            component={ChiTietTienDoCongTrinh}\r\n                        />\r\n\r\n                        <Route\r\n                            path=\"/Dashboard/DanhSachNhanVien\"\r\n                            component={DanhSachNhanVien}\r\n                        />\r\n                        <Route\r\n                            path=\"/Dashboard/DanhSachCongTrinh\"\r\n                            component={DanhSachCongTrinh}\r\n                        />\r\n                        <Route\r\n                            path=\"/Dashboard/DSHoanThanhCongTrinh\"\r\n                            component={DSHoanThanhCongTrinh}\r\n                        />\r\n\r\n                        <Route\r\n                            path=\"/Dashboard/BangLuong\"\r\n                            component={BangLuong}\r\n                        />\r\n                    </Switch>\r\n\r\n                    {/* Dark mode */}\r\n                    {/* <label for=\"dark-mode\" className={classes.iconDarkMode}>\r\n                        {theme ? (\r\n                            <Brightness2Icon\r\n                                style={{\r\n                                    color: 'black',\r\n                                    fontSize: '40px',\r\n                                }}\r\n                            />\r\n                        ) : (\r\n                            <WbSunnyIcon\r\n                                style={{\r\n                                    color: 'Orange',\r\n                                    fontSize: '40px',\r\n                                }}\r\n                            />\r\n                        )}\r\n                    </label>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        id=\"dark-mode\"\r\n                        hidden\r\n                        onChange={(e) => {\r\n                            setTheme(!theme)\r\n                            dispatch({\r\n                                type: DARK_LIGHT_MODE,\r\n                                value: !theme,\r\n                            })\r\n                        }}\r\n                    /> */}\r\n                </div>\r\n            </Router>\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\LayLaiMatKhau\\LayLaiMatKhau.js",[],"C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\component\\BaoCaoTienDo\\BaoCaoTienDo.js",["175","176"],"import React from 'react'\r\nimport './BaoCaoTienDo.css'\r\n\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\n\r\nexport default class BaoCaoTienDo extends React.Component {\r\n    render() {\r\n        console.log(this.props.item)\r\n        const date = this.props.item.date\r\n\r\n        return (\r\n            <div\r\n                style={{\r\n                    padding: '25px',\r\n                }}\r\n            >\r\n                <div className=\"header-baocao\">\r\n                    <div className=\"name-coquan\">\r\n                        <h3>Tên Công Ty</h3>\r\n                        <h4>. . . . . . . . . . . . .</h4>\r\n                    </div>\r\n                    <div>\r\n                        <h3>CỘNG HÒA XÃ HỘI CHỦ NGHĨA VIỆT NAM</h3>\r\n                        <h4 style={{ textAlign: 'center' }}>\r\n                            Độc lập - Tự do - Hạnh Phúc\r\n                        </h4>\r\n                        <h5 style={{ textAlign: 'center' }}>\r\n                            . . . . . ., ngày {date.getDate()} tháng{' '}\r\n                            {date.getMonth() + 1} năm {date.getFullYear()}\r\n                        </h5>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <div className=\"title-baocao\">\r\n                        <h3>BÁO CÁO TIẾN ĐỘ CÔNG TRÌNH THEO THÁNG</h3>\r\n                        <h3>\r\n                            THÁNG {date.getMonth() + 1} - NĂM{' '}\r\n                            {date.getFullYear()}\r\n                        </h3>\r\n                    </div>\r\n                    <div className=\"info-baocao\">\r\n                        <h5>Họ và tên: {this.props.item.name}</h5>\r\n                        <h5>Chức vụ: Trưởng Phòng</h5>\r\n                        <h5>Phòng ban: Dự Án</h5>\r\n                    </div>\r\n                    <TableContainer\r\n                        style={{\r\n                            maxHeight: '65vh',\r\n                            width: '100%',\r\n                        }}\r\n                    >\r\n                        <Table stickyHeader aria-label=\"sticky table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>STT</TableCell>\r\n                                    <TableCell>Tên Công Trình</TableCell>\r\n                                    <TableCell>Địa Điểm</TableCell>\r\n                                    <TableCell>Ngày Cấp Phép</TableCell>\r\n                                    <TableCell>Ngày Khởi Công</TableCell>\r\n                                    <TableCell>\r\n                                        Ngày Hoàn Thành Dự Kiến\r\n                                    </TableCell>\r\n                                    <TableCell>Tiến Độ</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {this.props.item.listCT.map((e, index) => {\r\n                                    return (\r\n                                        <TableRow hover>\r\n                                            <TableCell>{index}</TableCell>\r\n                                            <TableCell>{e.TenCT}</TableCell>\r\n                                            <TableCell>{e.DiaDiem}</TableCell>\r\n                                            <TableCell>{e.NgayCP}</TableCell>\r\n                                            <TableCell>{e.NgayKC}</TableCell>\r\n                                            <TableCell>{e.NgayHT}</TableCell>\r\n                                            <TableCell>{e.TienDo}%</TableCell>\r\n                                        </TableRow>\r\n                                    )\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    <div className=\"ki-ten\">\r\n                        <h4>Tổng Giám Đốc</h4>\r\n                        <h4>Người Báo Cáo</h4>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\reactRedux\\ReduxAc.js",[],"C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\component\\TitleForm\\TitleForm.js",[],["177","178"],"C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\component\\ButtonForm\\ButtonForm.js",["179","180","181","182","183"],"import React, { useState, useEffect } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport './css/ButtonForm.css'\r\n\r\nimport { GET_INFO_NHANVIEN } from '../../reactRedux/ReduxAc'\r\n\r\n//import func valid\r\nimport {\r\n    validatedPhone,\r\n    validatedPassword,\r\n    validatedText,\r\n} from '../../regex/regexValidated'\r\n\r\nfunction ButtonForm(props) {\r\n    const URL_API = 'https://qlnscloud.herokuapp.com/account2/login'\r\n    const [disableButton, setDisableButton] = useState(false)\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    const [keyPress, setKeyPress] = useState()\r\n\r\n    const URL_UPDATE_NHANVIEN =\r\n        'https://qlnscloud.herokuapp.com/account2/CapNhatThongTin?token='\r\n\r\n    const URL_GETALL_NHANVIEN =\r\n        'https://qlnscloud.herokuapp.com/account2/allNhanVien?token='\r\n\r\n    const TOKEN = sessionStorage.getItem('token')\r\n    const data_info_person = JSON.parse(sessionStorage.getItem('info'))\r\n\r\n    function saveTokenToSessionStorage(token) {\r\n        //Check browser support\r\n        if (typeof Storage !== 'undefined') {\r\n            sessionStorage.setItem('token', token)\r\n        } else {\r\n            console.log('No Web Storage support')\r\n        }\r\n    }\r\n\r\n    function saveInfoPersonToSessionStorage(data) {\r\n        //Check browser support\r\n        if (typeof Storage !== 'undefined') {\r\n            sessionStorage.setItem('info', JSON.stringify(data))\r\n        } else {\r\n            console.log('No Web Storage support')\r\n        }\r\n    }\r\n\r\n    function login() {\r\n        setDisableButton(true)\r\n        props.loading(true)\r\n        if (window.fetch) {\r\n            fetch(URL_API, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    SDT: props.inputSDT,\r\n                    Pass: props.inputPass,\r\n                }),\r\n            })\r\n                .then((response) => {\r\n                    return response.json()\r\n                })\r\n                .then(async (result) => {\r\n                    if (result.success) {\r\n                        await saveTokenToSessionStorage(result.token)\r\n                        await saveInfoPersonToSessionStorage(result.data)\r\n                        await dispatch({\r\n                            type: GET_INFO_NHANVIEN,\r\n                            value: {\r\n                                imgDefaultStore: result.data.Avatar,\r\n                                nameDefaultStore: result.data.HoTen,\r\n                            },\r\n                        })\r\n                        history.push(props.link)\r\n                    } else {\r\n                        props.setIsLogin(false)\r\n                    }\r\n                    props.loading(false)\r\n                })\r\n                .catch((error) => {\r\n                    console.log('Lỗi', error)\r\n                    props.loading(false)\r\n                })\r\n\r\n            setDisableButton(false)\r\n        } else {\r\n            console.log('Fetch not found')\r\n        }\r\n    }\r\n\r\n    function changePassword() {\r\n        props.setLoading(true)\r\n\r\n        if (props.pass !== data_info_person.Pass) {\r\n            props.setShowMess(true)\r\n            props.setTextMess('Mật khẩu củ không đúng')\r\n            props.setLoading(false)\r\n            return\r\n        }\r\n\r\n        if (props.newPass !== props.newPassAgain) {\r\n            props.setShowMess(true)\r\n            props.setTextMess('Nhập lại mật khẩu không đúng')\r\n            props.setLoading(false)\r\n            return\r\n        }\r\n\r\n        if (window.fetch) {\r\n            const itemBody = {\r\n                MaNV: data_info_person.MaNV,\r\n                MaPB: data_info_person.MaPB,\r\n                MaCV: data_info_person.MaNV,\r\n                BaoHiem: data_info_person.BaoHiem,\r\n                LuongCoBan: data_info_person.LuongCoBan,\r\n                TypeNV: data_info_person.TypeNV,\r\n\r\n                Pass: props.newPass ? props.newPass : data_info_person.Pass,\r\n\r\n                SDT: data_info_person.SDT,\r\n                HoTen: data_info_person.HoTen,\r\n                Avatar: data_info_person.Avatar,\r\n                NgaySinh: data_info_person.NgaySinh,\r\n                GioiTinh: data_info_person.GioiTinh,\r\n                DiaChi: data_info_person.DiaChi,\r\n            }\r\n\r\n            fetch(URL_UPDATE_NHANVIEN + TOKEN, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(itemBody),\r\n            })\r\n                .then((response) => {\r\n                    return response.json()\r\n                })\r\n                .then((result) => {\r\n                    console.log(result)\r\n                    if (result.success) {\r\n                        sessionStorage.setItem(\r\n                            'info',\r\n                            JSON.stringify(result.data)\r\n                        )\r\n                        props.setLoading(false)\r\n                        history.push(props.link)\r\n                    } else {\r\n                        props.setShowMess(true)\r\n                        props.setTextMess('Đổi mật khẩu không thành công')\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    props.setLoading(false)\r\n                    console.log('Lỗi fech', error)\r\n                })\r\n        } else {\r\n            console.log('fetch not found')\r\n        }\r\n    }\r\n\r\n    function resetPass() {\r\n        console.log(props.sdtReset)\r\n        // props.setLoading(true)\r\n\r\n        if (window.fetch) {\r\n            fetch(URL_GETALL_NHANVIEN + TOKEN)\r\n                .then((response) => {\r\n                    return response.json()\r\n                })\r\n                .then((result) => {\r\n                    console.log(result)\r\n                    // if (result.success) {\r\n                    //     props.setLoading(false)\r\n                    //     history.push(props.link)\r\n                    // } else {\r\n                    //     props.setShowMess(true)\r\n                    //     props.setTextMess(result.mess)\r\n                    // }\r\n                })\r\n                .catch((error) => {\r\n                    props.setLoading(false)\r\n                    console.log('Lỗi fetch', error)\r\n                })\r\n        } else {\r\n            console.log('fetch not found')\r\n        }\r\n    }\r\n\r\n    function handleClickSubmit() {\r\n        switch (props.feature) {\r\n            case 'login': {\r\n                if (\r\n                    validatedPhone(props.inputSDT) &&\r\n                    validatedPassword(props.inputPass)\r\n                ) {\r\n                    login()\r\n                    return\r\n                }\r\n                break\r\n            }\r\n\r\n            case 'changePassword': {\r\n                if (\r\n                    validatedText(props.pass, 'mật khẩu') ||\r\n                    validatedText(props.newPass, 'mật khẩu mới') ||\r\n                    validatedText(props.newPassAgain, 'xác nhận mật khẩu mới')\r\n                ) {\r\n                    changePassword()\r\n                    return\r\n                }\r\n                break\r\n            }\r\n\r\n            // case 'ResetPass': {\r\n            //     // resetPass()\r\n            //     history.push(props.link)\r\n            //     return\r\n            // }\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n    return (\r\n        <button\r\n            type=\"button\"\r\n            className=\"btn-click\"\r\n            id=\"submit-click\"\r\n            disabled={disableButton}\r\n            onClick={(e) => {\r\n                handleClickSubmit()\r\n            }}\r\n        >\r\n            {props.btnText}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default ButtonForm\r\n","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\component\\InputText\\InputText.js",[],"C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\component\\Modal\\ModalWL.js",["184","185","186","187"],"import React, { useState, useEffect } from 'react'\r\nimport { Modal, Button, Carousel } from 'react-bootstrap'\r\n\r\nfunction ModalWL({ srcImg, show, setShow, header, heightImg, widthImg }) {\r\n    const handleClose = () => setShow(false)\r\n    const handleShow = () => setShow(true)\r\n    const [render, setRender] = useState(null)\r\n\r\n    const _renderImg = () => {\r\n        var temprender = []\r\n        if (srcImg.map != undefined) {\r\n            srcImg.map((current) => {\r\n                temprender.push(\r\n                    <Carousel.Item>\r\n                        <img\r\n                            src={current.default}\r\n                            style={{\r\n                                height: heightImg,\r\n                                width: widthImg,\r\n                            }}\r\n                            alt=\"\"\r\n                        />\r\n                    </Carousel.Item>\r\n                )\r\n            })\r\n        }\r\n        setRender(temprender)\r\n    }\r\n\r\n    useEffect(() => {\r\n        _renderImg()\r\n    }, [])\r\n\r\n    return (\r\n        <Modal show={show} onHide={handleClose} size=\"lg\">\r\n            <Modal.Header closeButton>\r\n                <h5 style={{ color: 'black' }}>{header}</h5>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Carousel>{render}</Carousel>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ModalWL\r\n\r\n// prop\r\n// array img duoi dang nhu sau\r\n// var srcImg = [\r\n//     require('../../assets/Img/1.jpg'),\r\n//     require('../../assets/Img/2.jpg'),\r\n// ]\r\n// show truyen vao bien de show va close thong bao : false close , true : show\r\n// setShow truyen vao bien de set gia tri cua show\r\n// header : text header\r\n// heightImg : chieu cao anh\r\n// widthImg : chieu rong anh\r\n","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\Theme\\theme.js",[],"C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\Theme\\global.js",[],"C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\component\\HeaderDashboard\\HeaderDashboard.js",["188","189","190"],"import React, { useState, useEffect, useMemo } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n//import icon react material ui\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport HomeWorkIcon from '@material-ui/icons/HomeWork'\r\nimport Brightness2Icon from '@material-ui/icons/Brightness2'\r\nimport WbSunnyIcon from '@material-ui/icons/WbSunny'\r\n\r\n//import component react material ui\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\n//import component react bootstrap\r\nimport Container from 'react-bootstrap/Container'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { lightTheme, darkTheme } from '../../Theme/theme'\r\n\r\nimport { DARK_LIGHT_MODE } from '../../reactRedux/ReduxAc'\r\n\r\nconst HeaderDashboard = React.memo((props) => {\r\n    const data_info_person = JSON.parse(sessionStorage.getItem('info'))\r\n\r\n    //value state in store\r\n    const imgNhanVien = useSelector((state) => state.imgNV)\r\n    const tenNhanVien = useSelector((state) => state.hoTenNV)\r\n\r\n    const isDarkMode = useSelector((state) => state.isDarkMode)\r\n\r\n    const [theme, setTheme] = useState(true)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        styleHeaderContent: {\r\n            minHeight: '60px',\r\n            padding: '0 10px',\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n        },\r\n\r\n        input: {\r\n            marginLeft: theme.spacing(1),\r\n            flex: 1,\r\n        },\r\n        iconButton: {\r\n            padding: 10,\r\n        },\r\n        divider: {\r\n            height: 28,\r\n            margin: 4,\r\n        },\r\n        formSearch: {\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItem: 'center',\r\n            height: '100%',\r\n            padding: '0 20px',\r\n        },\r\n        searchContainer: {\r\n            height: '40px',\r\n            width: '380px',\r\n            borderRadius: '50px',\r\n            marginLeft: '20px',\r\n            border: '1px solid gray',\r\n            overflow: 'hidden',\r\n        },\r\n        searchIcon: {\r\n            fontSize: '26px',\r\n            height: '100%',\r\n            cursor: 'pointer',\r\n            color: 'gray',\r\n        },\r\n        inputSearch: {\r\n            border: 'none',\r\n            outline: 'none',\r\n            height: '100%',\r\n            width: '100%',\r\n            fontSize: '13px',\r\n            fontWeight: '600',\r\n            color: isDarkMode ? lightTheme.text : darkTheme.text,\r\n            backgroundColor: isDarkMode ? lightTheme.body : darkTheme.body,\r\n        },\r\n        Dropdown: {\r\n            backgroundColor: 'transparent',\r\n            border: 'none',\r\n            outline: 'none',\r\n        },\r\n        userAccount: {\r\n            display: 'flex',\r\n            justifySelf: 'flex-end',\r\n        },\r\n\r\n        DropdownToggle: {\r\n            color: isDarkMode ? lightTheme.text : darkTheme.text,\r\n            fontSize: '15px',\r\n            fontWeight: '600',\r\n            '&:hover': {\r\n                color: isDarkMode ? lightTheme.text : darkTheme.text,\r\n            },\r\n        },\r\n        MenuIcon: {\r\n            display: 'none',\r\n            cursor: 'pointer',\r\n        },\r\n        PaperHeader: {\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            width: '100%',\r\n            borderRadius: '0',\r\n            backgroundColor: isDarkMode ? lightTheme.body : darkTheme.body,\r\n        },\r\n        HomeWorkIcon: {\r\n            fontSize: '40px',\r\n        },\r\n        itemDropdown: {\r\n            backgroundColor: isDarkMode ? 'white' : darkTheme.body,\r\n            color: isDarkMode ? lightTheme.text : darkTheme.text,\r\n        },\r\n        iconDarkMode: {\r\n            borderRadius: '50%',\r\n            display: 'flex',\r\n            width: '45px',\r\n            height: '45px',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            marginRight: '40px',\r\n            fontSize: '50px',\r\n            cursor: 'pointer',\r\n            zIndex: '1',\r\n            transition: 'all 0.2s linear',\r\n\r\n            '&:hover': {\r\n                backgroundColor: 'rgba(0, 0, 0, 0.3)',\r\n            },\r\n        },\r\n    }))\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Paper elevation={3} className={classes.PaperHeader}>\r\n            <Container className={classes.styleHeaderContent} fluid=\"md\">\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        height: '100%',\r\n                        justifyContent: 'center',\r\n                        alignItems: 'center',\r\n                    }}\r\n                >\r\n                    <Link to=\"/Dashboard\">\r\n                        <HomeWorkIcon className={classes.HomeWorkIcon} />\r\n                    </Link>\r\n\r\n                    <div variant=\"outlined\" className={classes.searchContainer}>\r\n                        <form className={classes.formSearch}>\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Tìm Kiếm...\"\r\n                                className={classes.inputSearch}\r\n                            />\r\n                            <SearchIcon className={classes.searchIcon} />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        justifyContent: 'center',\r\n                        alignItems: 'center',\r\n                    }}\r\n                >\r\n                    {/* Dark mode */}\r\n                    <label for=\"dark-mode\" className={classes.iconDarkMode}>\r\n                        {theme ? (\r\n                            <Brightness2Icon\r\n                                style={{\r\n                                    color: 'black',\r\n                                    fontSize: '40px',\r\n                                }}\r\n                            />\r\n                        ) : (\r\n                            <WbSunnyIcon\r\n                                style={{\r\n                                    color: 'Orange',\r\n                                    fontSize: '40px',\r\n                                }}\r\n                            />\r\n                        )}\r\n                    </label>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        id=\"dark-mode\"\r\n                        hidden\r\n                        onChange={(e) => {\r\n                            setTheme(!theme)\r\n                            dispatch({\r\n                                type: DARK_LIGHT_MODE,\r\n                                value: !theme,\r\n                            })\r\n                        }}\r\n                    />\r\n                    <div className={classes.userAccount}>\r\n                        <img\r\n                            src={\r\n                                imgNhanVien\r\n                                    ? imgNhanVien\r\n                                    : data_info_person.Avatar\r\n                            }\r\n                            style={{\r\n                                width: '35px',\r\n                                height: '35px',\r\n                                borderRadius: '50%',\r\n                                marginRight: '5px',\r\n                                objectFit: 'cover',\r\n                                // backgroundColor: 'white',\r\n                            }}\r\n                        />\r\n                        <Dropdown>\r\n                            <Dropdown.Toggle\r\n                                variant=\"none\"\r\n                                id=\"dropdown-basic\"\r\n                                className={classes.DropdownToggle}\r\n                            >\r\n                                {tenNhanVien\r\n                                    ? tenNhanVien\r\n                                    : data_info_person.HoTen}\r\n                            </Dropdown.Toggle>\r\n                            <Dropdown.Menu>\r\n                                <Dropdown.Item\r\n                                    href=\"#/Dashboard/ChiTietNhanVien\"\r\n                                    className={classes.itemDropdown}\r\n                                >\r\n                                    Thông Tin Cá Nhân\r\n                                </Dropdown.Item>\r\n                                <Dropdown.Item\r\n                                    href=\"#/Changepassword\"\r\n                                    className={classes.itemDropdown}\r\n                                >\r\n                                    Đổi Mật Khẩu\r\n                                </Dropdown.Item>\r\n                                <Dropdown.Item\r\n                                    href=\"#/\"\r\n                                    onClick={() => {\r\n                                        console.log('đăng xuất')\r\n                                        sessionStorage.removeItem('info')\r\n                                        sessionStorage.removeItem('token')\r\n                                    }}\r\n                                    className={classes.itemDropdown}\r\n                                >\r\n                                    Đăng Xuất\r\n                                </Dropdown.Item>\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </div>\r\n\r\n                    <MenuIcon className={classes.MenuIcon} />\r\n                </div>\r\n            </Container>\r\n        </Paper>\r\n    )\r\n})\r\n\r\nexport default HeaderDashboard\r\n","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\MainActivity\\Chil_Screens\\PhanCongNhanVien.js",["191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207"],"import React, { useEffect, useState } from 'react'\r\n\r\nimport InputText from '../../../component/InputText/InputText'\r\nimport '../../../component/InputText/css/InputText.css'\r\n\r\n//import func valid\r\nimport {\r\n    validatedPhone,\r\n    validatedPassword,\r\n    validatedText,\r\n} from '../../../regex/regexValidated'\r\n\r\n//import api\r\nimport { pushNotify } from '../../../api/pushNotify'\r\n\r\n//import component React Bootstrap\r\nimport Container from 'react-bootstrap/Container'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\n//import icon react material ui\r\nimport SearchIcon from '@material-ui/icons/Search'\r\n\r\n//Import react material-ui\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Alert from '@material-ui/lab/Alert'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport Rating from '@material-ui/lab/Rating'\r\nimport Box from '@material-ui/core/Box'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport { Paper } from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formSearch: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItem: 'center',\r\n        height: '100%',\r\n        padding: '0 20px',\r\n    },\r\n    searchContainer: {\r\n        border: '1px solid black',\r\n        height: '50px',\r\n        width: '100%',\r\n        borderRadius: '50px',\r\n        backgroundColor: 'white',\r\n    },\r\n    searchIcon: {\r\n        fontSize: '30px',\r\n        height: '100%',\r\n        cursor: 'pointer',\r\n        color: 'gray',\r\n    },\r\n    inputSearch: {\r\n        border: 'none',\r\n        outline: 'none',\r\n        height: '100%',\r\n        width: '100%',\r\n        fontSize: '16px',\r\n        fontWeight: '600',\r\n    },\r\n    notNetWok: {\r\n        position: 'absolute',\r\n        minHeight: '500px',\r\n        right: '0',\r\n        left: '0',\r\n        fontSize: '30px',\r\n        fontWeight: '600',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    iconLoad: {\r\n        position: 'absolute',\r\n        minHeight: '500px',\r\n        right: '0',\r\n        left: '0',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        zIndex: '10',\r\n    },\r\n    itemDialog: {\r\n        fontSize: '20px',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n    },\r\n}))\r\n\r\nfunction PhanCongNhanVien(props) {\r\n    const URL_API = 'https://qlnscloud.herokuapp.com/ngaycong2/'\r\n    const GET_DSNC = 'ToanBoNgayCong'\r\n    const ADD_NGAYCONG = 'ThemNgayCongCuaNhanVien'\r\n    const TOKEN = sessionStorage.getItem('token')\r\n\r\n    const [thongTinCT, setThongTinCT] = useState()\r\n    const [valueRating, setValueRating] = useState()\r\n    const [thongTinNV, setThongTinNV] = useState()\r\n\r\n    const [allNgayCong, setAllNgayCong] = useState()\r\n\r\n    const [UITableNgayCong, setUITableNhanVien] = useState()\r\n    const [loadDSNC, setLoadDSNC] = useState(false)\r\n    const [danhSachCT, setDanhSachCT] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const [showMess, setShowMess] = useState(false)\r\n    const [textMess, setTextMess] = useState('')\r\n    const [severityMess, setSeverityMess] = useState('')\r\n\r\n    const [isNetWork, setIsNetWork] = useState(true)\r\n\r\n    const [modalShowDialogAddNC, setModalShowDialogAddNC] = useState(false)\r\n    const [modalShowDialogDelNC, setModalShowDialogDelNC] = useState(false)\r\n    const [modalShowDialogUpdateNC, setModalShowDialogUpdateNC] = useState(\r\n        false\r\n    )\r\n\r\n    const object_nhanVien = JSON.parse(sessionStorage.getItem('info'))\r\n\r\n    const classes = useStyles()\r\n\r\n    function getDanhSachNgayCong() {\r\n        setLoading(true)\r\n        if (window.fetch) {\r\n            fetch(URL_API + GET_DSNC + '?token=' + TOKEN)\r\n                .then((response) => {\r\n                    return response.json()\r\n                })\r\n                .then((result) => {\r\n                    RenderUITableNhanVien(result.data)\r\n                    setAllNgayCong(result.data)\r\n                    setLoading(false)\r\n                    setLoadDSNC(false)\r\n                })\r\n                .catch((error) => {\r\n                    setLoading(false)\r\n                    console.log('Lỗi', error)\r\n                })\r\n        } else {\r\n            console.log('fetch not found')\r\n        }\r\n    }\r\n\r\n    function getDanhSachCongTrinh() {\r\n        fetch(\r\n            'https://qlnscloud.herokuapp.com/congtrinh2/ToanBoCongTrinh' +\r\n                '?token=' +\r\n                TOKEN\r\n        )\r\n            .then((response) => {\r\n                return response.json()\r\n            })\r\n            .then((result) => {\r\n                if (result.success) {\r\n                    setDanhSachCT(result.data)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log('Lỗi', error)\r\n            })\r\n    }\r\n\r\n    function checkNetWork() {\r\n        window.addEventListener('online', () => {\r\n            setIsNetWork(window.navigator.onLine)\r\n            console.log('online')\r\n            return\r\n        })\r\n\r\n        window.addEventListener('offline', () => {\r\n            setIsNetWork(window.navigator.onLine)\r\n            console.log('offline')\r\n            return\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        checkNetWork()\r\n        getDanhSachNgayCong()\r\n        getDanhSachCongTrinh()\r\n    }, [loadDSNC])\r\n\r\n    function RenderUITableNhanVien(data) {\r\n        setUITableNhanVien(\r\n            data.map((e) => {\r\n                return ItemNhanVien(e)\r\n            })\r\n        )\r\n    }\r\n\r\n    var stt = 0\r\n    function ItemNhanVien(props) {\r\n        stt++\r\n\r\n        return (\r\n            <TableRow\r\n                hover\r\n                style={{\r\n                    backgroundColor:\r\n                        props.MaNV == object_nhanVien.MaNV\r\n                            ? 'gainsboro'\r\n                            : 'white',\r\n                }}\r\n            >\r\n                <TableCell>{stt}</TableCell>\r\n                <TableCell>{props.HoTen}</TableCell>\r\n                <TableCell>{props.TenCT}</TableCell>\r\n                <TableCell>{props.DiaDiem}</TableCell>\r\n                <TableCell>{props.DateWorking}</TableCell>\r\n                <TableCell>{props.DateDone}</TableCell>\r\n                {object_nhanVien.TypeNV == 2 ? (\r\n                    <TableCell\r\n                        style={{\r\n                            display: 'flex',\r\n                            justifyContent: 'center',\r\n                        }}\r\n                    >\r\n                        <Button\r\n                            variant=\"outline-danger\"\r\n                            style={{\r\n                                width: '170px',\r\n                                fontSize: '16px',\r\n                            }}\r\n                            onClick={() => {\r\n                                setThongTinCT(props)\r\n                                setModalShowDialogAddNC(true)\r\n                                setThongTinNV(props)\r\n                            }}\r\n                        >\r\n                            Thêm Lịch Làm\r\n                        </Button>\r\n                    </TableCell>\r\n                ) : (\r\n                    <div></div>\r\n                )}\r\n            </TableRow>\r\n        )\r\n    }\r\n\r\n    function ModalDialogAddLichLam() {\r\n        const [maCT, setMaCT] = useState()\r\n        const [tenCT, setTenCT] = useState()\r\n        const [diaDiemCT, setDiaDiemCT] = useState()\r\n        const [ngayLam, setNgayLam] = useState()\r\n        const [ngayKetThuc, setNgayKetThuc] = useState()\r\n\r\n        const thongTinNhanVien = { ...thongTinNV }\r\n\r\n        function addLichLam() {\r\n            const itemRequestBody = {\r\n                MaNV: thongTinNhanVien.MaNV,\r\n                HoTen: thongTinNhanVien.HoTen,\r\n                MaCT: maCT,\r\n                TenCT: tenCT,\r\n                DiaDiem: diaDiemCT,\r\n                DateWorking: ngayLam,\r\n                DateDone: ngayKetThuc,\r\n                SoNgayCong:\r\n                    (new Date(ngayKetThuc).getTime() -\r\n                        new Date(ngayLam).getTime()) /\r\n                    1000 /\r\n                    86400,\r\n            }\r\n\r\n            //kiểm tra ngày làm có lơn hơn ngày hiện tại\r\n            if (\r\n                Date.now() > new Date(ngayLam).getTime() &&\r\n                new Date(ngayKetThuc).getTime() < new Date(ngayLam).getTime()\r\n            ) {\r\n                setShowMess(true)\r\n                setTextMess(\r\n                    'Ngày làm phải lớn hơn ngày hiện tại và nhỏ hơn ngày kết thúc'\r\n                )\r\n                setSeverityMess('error')\r\n                return\r\n            }\r\n\r\n            if (window.fetch) {\r\n                fetch(URL_API + ADD_NGAYCONG + '?token=' + TOKEN, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify(itemRequestBody),\r\n                })\r\n                    .then((response) => {\r\n                        return response.json()\r\n                    })\r\n                    .then((result) => {\r\n                        if (result.success) {\r\n                            setLoadDSNC(true)\r\n                            setShowMess(true)\r\n                            setTextMess('Thêm lịch làm thành công!')\r\n                            setSeverityMess('success')\r\n\r\n                            //Thêm thông báo thêm lịch làm nv thành công\r\n                            const objDate = new Date()\r\n                            const bodyNoti = {\r\n                                NoiDung: `Nhân viên ${thongTinNhanVien.HoTen} vừa được phân công việc làm`,\r\n                                DateAdding: `${objDate.getFullYear()}-${\r\n                                    objDate.getMonth() + 1\r\n                                }-${objDate.getDate()}`,\r\n                                TimeAt: `${objDate.getHours()}:${objDate.getMinutes()}`,\r\n                            }\r\n                            pushNotify(bodyNoti, TOKEN)\r\n                            return\r\n                        } else {\r\n                            setShowMess(true)\r\n                            setTextMess(result.mess)\r\n                            setSeverityMess('error')\r\n                            return\r\n                        }\r\n                    })\r\n                    .catch((error) => console.log('Lỗi', error))\r\n            } else {\r\n                console.log('fetch not found')\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                show={modalShowDialogAddNC}\r\n                onHide={() => setModalShowDialogAddNC(false)}\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                size=\"xl\"\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <h4\r\n                        style={{\r\n                            color: 'black',\r\n                        }}\r\n                    >\r\n                        Thêm Lịch Làm\r\n                    </h4>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <TableContainer\r\n                        style={{\r\n                            maxHeight: '200px',\r\n                            width: '100%',\r\n                        }}\r\n                    >\r\n                        <Table stickyHeader>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>STT</TableCell>\r\n                                    <TableCell>Tên Công Trình</TableCell>\r\n                                    <TableCell>Địa Điểm</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {danhSachCT.map((e, index) => {\r\n                                    return (\r\n                                        <TableRow\r\n                                            hover\r\n                                            style={{ cursor: 'pointer' }}\r\n                                            onClick={() => {\r\n                                                setMaCT(e.MaCT)\r\n                                                setTenCT(e.TenCT)\r\n                                                setDiaDiemCT(e.DiaDiem)\r\n                                            }}\r\n                                        >\r\n                                            <TableCell>{index}</TableCell>\r\n                                            <TableCell>{e.TenCT}</TableCell>\r\n                                            <TableCell>{e.DiaDiem}</TableCell>\r\n                                        </TableRow>\r\n                                    )\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    <br />\r\n                    <div className=\"input\">\r\n                        <input\r\n                            placeholder=\"Tên Công Trình\"\r\n                            className=\"input-content\"\r\n                            style={{\r\n                                borderBottom: 'none',\r\n                            }}\r\n                            onChange={(e) => {\r\n                                setTenCT(e.target.value)\r\n                            }}\r\n                            value={tenCT}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input\">\r\n                        <input\r\n                            placeholder=\"Địa Điểm \"\r\n                            className=\"input-content\"\r\n                            onChange={(e) => {\r\n                                setDiaDiemCT(e.target.value)\r\n                            }}\r\n                            value={diaDiemCT}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input\">\r\n                        <TextField\r\n                            id=\"date\"\r\n                            label=\"Ngày bắt đầu\"\r\n                            type=\"date\"\r\n                            className=\"input-content\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={(e) => {\r\n                                setNgayLam(e.target.value)\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input\">\r\n                        <TextField\r\n                            id=\"date\"\r\n                            label=\"Ngày kết thúc\"\r\n                            type=\"date\"\r\n                            className=\"input-content\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={(e) => {\r\n                                setNgayKetThuc(e.target.value)\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button\r\n                        variant=\"secondary\"\r\n                        onClick={() => {\r\n                            setModalShowDialogAddNC(false)\r\n                        }}\r\n                    >\r\n                        Hủy Bỏ\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        onClick={() => {\r\n                            setModalShowDialogAddNC(false)\r\n                            addLichLam()\r\n                        }}\r\n                    >\r\n                        Thêm\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <ModalDialogAddLichLam />\r\n            <Snackbar\r\n                open={showMess}\r\n                autoHideDuration={3000}\r\n                onClose={() => {\r\n                    setShowMess(false)\r\n                }}\r\n            >\r\n                <Alert\r\n                    onClose={() => {\r\n                        setShowMess(false)\r\n                    }}\r\n                    severity={severityMess}\r\n                >\r\n                    {textMess}\r\n                </Alert>\r\n            </Snackbar>\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    margin: '20px 0',\r\n                }}\r\n            >\r\n                <h1\r\n                    style={{\r\n                        width: '100%',\r\n                        textAlign: 'center',\r\n                    }}\r\n                >\r\n                    Phân Công Nhân Viên\r\n                </h1>\r\n            </div>\r\n\r\n            <Paper style={{ width: '100%' }}>\r\n                {loading ? (\r\n                    <div className={classes.iconLoad}>\r\n                        <Spinner animation=\"border\" />\r\n                    </div>\r\n                ) : (\r\n                    <div></div>\r\n                )}\r\n                {isNetWork ? (\r\n                    <div>\r\n                        <div className={classes.searchContainer}>\r\n                            <form className={classes.formSearch}>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Tìm Kiếm Nhân Viên Hoặc Công Trình\"\r\n                                    className={classes.inputSearch}\r\n                                    onChange={(event) => {\r\n                                        const textSearch = event.target.value.toLowerCase()\r\n                                        const regex = new RegExp(textSearch)\r\n\r\n                                        setUITableNhanVien(\r\n                                            allNgayCong.map((e) => {\r\n                                                if (\r\n                                                    regex.test(\r\n                                                        e.HoTen.toLowerCase()\r\n                                                    ) ||\r\n                                                    regex.test(\r\n                                                        e.TenCT.toLowerCase()\r\n                                                    )\r\n                                                ) {\r\n                                                    return ItemNhanVien(e)\r\n                                                }\r\n                                            })\r\n                                        )\r\n                                    }}\r\n                                />\r\n                                <SearchIcon className={classes.searchIcon} />\r\n                            </form>\r\n                        </div>\r\n\r\n                        <TableContainer\r\n                            style={{\r\n                                maxHeight: '70vh',\r\n                                width: '100%',\r\n                                backgroundColor: 'white',\r\n                            }}\r\n                        >\r\n                            <Table stickyHeader aria-label=\"sticky table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>STT</TableCell>\r\n                                        <TableCell>Tên Nhân Viên</TableCell>\r\n                                        <TableCell>Tên Công Trình</TableCell>\r\n                                        <TableCell>Địa Điểm</TableCell>\r\n                                        <TableCell>Ngày Làm</TableCell>\r\n                                        <TableCell>Ngày Kết Thúc</TableCell>\r\n                                        <TableCell></TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n\r\n                                <TableBody>{UITableNgayCong}</TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </div>\r\n                ) : (\r\n                    <div className={classes.notNetWok}>\r\n                        Không có mạng, vui lòng thử lại\r\n                    </div>\r\n                )}\r\n            </Paper>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default PhanCongNhanVien\r\n","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\MainActivity\\Chil_Screens\\DSHoanThanhCongTrinh.js",["208","209","210","211","212","213","214"],"import React, { useEffect, useState } from 'react'\r\n\r\n//import component React Bootstrap\r\nimport Container from 'react-bootstrap/Container'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\n//import icon react material ui\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n\r\n//Import react material-ui\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formSearch: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItem: 'center',\r\n        height: '100%',\r\n        padding: '0 20px',\r\n    },\r\n    searchContainer: {\r\n        border: '1px solid black',\r\n        height: '50px',\r\n        width: '100%',\r\n        borderRadius: '50px',\r\n        backgroundColor: 'white',\r\n    },\r\n    searchIcon: {\r\n        fontSize: '30px',\r\n        height: '100%',\r\n        cursor: 'pointer',\r\n        color: 'gray',\r\n    },\r\n    inputSearch: {\r\n        border: 'none',\r\n        outline: 'none',\r\n        height: '100%',\r\n        width: '100%',\r\n        fontSize: '18px',\r\n        fontWeight: '600',\r\n    },\r\n    iconLoad: {\r\n        position: 'absolute',\r\n        minHeight: '500px',\r\n        right: '0',\r\n        left: '0',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n}))\r\n\r\nfunction DSCongTrinhHoanThanh(props) {\r\n    const classes = useStyles()\r\n    const URL_API = 'https://qlnscloud.herokuapp.com/congtrinh2/'\r\n    const GET_CONGTRINH = 'ToanBoCongTrinh'\r\n    const TOKEN = sessionStorage.getItem('token')\r\n\r\n    const [UITableCongTrinhHT, setUITableCongTrinhHT] = useState()\r\n\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const [dataDSCTHT, setDataDSCTHT] = useState()\r\n\r\n    function getDanhSachCongTrinhHT() {\r\n        setLoading(true)\r\n        if (window.fetch) {\r\n            fetch(URL_API + GET_CONGTRINH + '?token=' + TOKEN)\r\n                .then((response) => {\r\n                    return response.json()\r\n                })\r\n                .then((result) => {\r\n                    RenderUITableCongTrinhHT(result.data)\r\n                    setLoading(false)\r\n                })\r\n                .catch((error) => {\r\n                    setLoading(false)\r\n                    console.error('Fetch to false', error)\r\n                })\r\n        } else {\r\n            console.log('Fetch not found')\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getDanhSachCongTrinhHT()\r\n    }, [])\r\n\r\n    function RenderUITableCongTrinhHT(data) {\r\n        setUITableCongTrinhHT(\r\n            data.map((e) => {\r\n                if (e.TienDo == 100) {\r\n                    return ItemCTHoanThanh(e)\r\n                }\r\n            })\r\n        )\r\n        setDataDSCTHT(\r\n            data.map((e) => {\r\n                if (e.TienDo == 100) {\r\n                    return e\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    var stt = 0\r\n    function ItemCTHoanThanh(props) {\r\n        stt++\r\n        return (\r\n            <TableRow hover>\r\n                <TableCell>{stt}</TableCell>\r\n                <TableCell>{props.TenCT}</TableCell>\r\n                <TableCell>{props.DiaDiem}</TableCell>\r\n                <TableCell>{props.NgayHT}</TableCell>\r\n            </TableRow>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    margin: '20px 0',\r\n                }}\r\n            >\r\n                <h1\r\n                    style={{\r\n                        width: '100%',\r\n                        textAlign: 'center',\r\n                    }}\r\n                >\r\n                    Danh Sách Công Trình Hoàn Thành\r\n                </h1>\r\n            </div>\r\n            <Paper style={{ width: '100%' }}>\r\n                {loading ? (\r\n                    <div className={classes.iconLoad}>\r\n                        <Spinner animation=\"border\" />\r\n                    </div>\r\n                ) : (\r\n                    <div></div>\r\n                )}\r\n                <div className={classes.searchContainer}>\r\n                    <form className={classes.formSearch}>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Tìm Kiếm Tên Hoặc Địa Điểm Công Trình\"\r\n                            className={classes.inputSearch}\r\n                            onChange={(event) => {\r\n                                const textSearch = event.target.value.toLowerCase()\r\n                                const regex = new RegExp(textSearch)\r\n                                setUITableCongTrinhHT(\r\n                                    dataDSCTHT.map((e) => {\r\n                                        if (e) {\r\n                                            if (\r\n                                                regex.test(\r\n                                                    e.TenCT.toLowerCase()\r\n                                                ) ||\r\n                                                regex.test(\r\n                                                    e.DiaDiem.toLowerCase()\r\n                                                )\r\n                                            ) {\r\n                                                return ItemCTHoanThanh(e)\r\n                                            }\r\n                                        }\r\n                                    })\r\n                                )\r\n                            }}\r\n                        />\r\n                        <SearchIcon className={classes.searchIcon} />\r\n                    </form>\r\n                </div>\r\n\r\n                <TableContainer\r\n                    style={{\r\n                        maxHeight: '75vh',\r\n                        width: '100%',\r\n                        backgroundColor: 'white',\r\n                    }}\r\n                >\r\n                    <Table stickyHeader aria-label=\"sticky table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>STT</TableCell>\r\n                                <TableCell>Tên Công Trình</TableCell>\r\n                                <TableCell>Địa Điểm</TableCell>\r\n                                <TableCell>Ngày Hoàn Thành</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>{UITableCongTrinhHT}</TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default DSCongTrinhHoanThanh\r\n","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\MainActivity\\Chil_Screens\\ChiTietNhanVien.js",["215","216","217","218","219","220","221","222"],"import { Paper } from '@material-ui/core'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { useDispatch, connect, useSelector } from 'react-redux'\r\n\r\nimport Container from 'react-bootstrap/Container'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n\r\nimport { lightTheme, darkTheme } from '../../../Theme/theme'\r\n\r\nimport { UPDATE_NHANVIEN } from '../../../reactRedux/ReduxAc'\r\n\r\nimport { validatedPhone } from '../../../regex/regexValidated'\r\n\r\n//import api\r\nimport { pushNotify } from '../../../api/pushNotify'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport PersonIcon from '@material-ui/icons/Person'\r\nimport Alert from '@material-ui/lab/Alert'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport TextField from '@material-ui/core/TextField'\r\n\r\nfunction ChiTietNhanVien(props) {\r\n    const data_info_person = JSON.parse(sessionStorage.getItem('info'))\r\n    const TOKEN = sessionStorage.getItem('token')\r\n\r\n    const URL_UPDATE_NHANVIEN =\r\n        'https://qlnscloud.herokuapp.com/account2/CapNhatThongTin?token='\r\n\r\n    const UPLOAD_IMG =\r\n        'https://qlnscloud.herokuapp.com/account2/UploadAvatar?token='\r\n\r\n    //Sửa nhân viên\r\n    const [disableInput, setDisableInput] = useState('none')\r\n    const [bgInput, setBgInput] = useState()\r\n    const [hiddenText, setHiddenText] = useState('none')\r\n\r\n    const [isFileTypeImg, SetIsFileTypeImg] = useState(true)\r\n\r\n    const [loading, setLoading] = useState()\r\n\r\n    const [showMess, setShowMess] = useState(false)\r\n    const [textMess, setTextMess] = useState('')\r\n    const [severityMess, setSeverityMess] = useState('')\r\n\r\n    const [showTextFieldDate, setShowTextFieldDate] = useState()\r\n\r\n    const [objFile, setObjFile] = useState()\r\n\r\n    const [textErrorUpdateImage, setTextErrorUpdateImage] = useState()\r\n\r\n    const dispatch = useDispatch()\r\n    const isDarkMode = useSelector((state) => state.isDarkMode)\r\n\r\n    //Chứa thông tin nhân viên\r\n    const [imgNhanVien, setImgNhanVien] = useState(data_info_person.Avatar)\r\n    const [valueInputTen, setValueInputTen] = useState(data_info_person.HoTen)\r\n    const [valueInputGT, setValueInputGT] = useState(data_info_person.GioiTinh)\r\n    const [valueInputSDT, setValueInputSDT] = useState(data_info_person.SDT)\r\n    const [valueInputNS, setValueInputNS] = useState(data_info_person.NgaySinh)\r\n    const [valueInputDC, setValueInputDC] = useState(data_info_person.DiaChi)\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        txtInput: {\r\n            outline: 'none',\r\n            width: '200px',\r\n            paddingLeft: '8px',\r\n            border: 'none',\r\n            fontSize: '17px',\r\n            fontWeight: '600',\r\n            margin: '8px 0',\r\n            pointerEvents: disableInput,\r\n            backgroundColor: isDarkMode ? 'white' : darkTheme.body,\r\n            color: isDarkMode ? lightTheme.text : darkTheme.text,\r\n            borderBottom: bgInput,\r\n        },\r\n        ColItem: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n        },\r\n        Button: {\r\n            width: '100px',\r\n            margin: '0 4px',\r\n        },\r\n        iconLoad: {\r\n            position: 'absolute',\r\n            minHeight: '500px',\r\n            right: '0',\r\n            left: '0',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            zIndex: '10',\r\n        },\r\n        textUploadImg: {\r\n            cursor: 'pointer',\r\n            color: 'blue',\r\n            display: hiddenText,\r\n        },\r\n    }))\r\n    const classes = useStyles()\r\n\r\n    async function uploadImg(nameFile) {\r\n        // console.log(objFile)\r\n        // Nếu ko có ảnh nào đc chọn thì bỏ qua\r\n        if (!objFile) {\r\n            return\r\n        }\r\n        // const reader = new FileReader()\r\n        // reader.onload = () => {\r\n        //     // console.log(reader)\r\n        //     var dataURL = reader.result\r\n        //     // console.log(dataURL) //get url img\r\n        //     // setImgNhanVien(dataURL)\r\n        // }\r\n\r\n        // try {\r\n        //     reader.readAsDataURL(objFile)\r\n        // } catch (error) {\r\n        //     console.error(error)\r\n        // }\r\n\r\n        if (window.fetch) {\r\n            const formData = new FormData()\r\n            formData.append('image', objFile)\r\n            formData.append('filename', nameFile)\r\n\r\n            // console.log(formData)\r\n\r\n            const fetchUploadImg = await fetch(UPLOAD_IMG + TOKEN, {\r\n                mode: 'no-cors',\r\n                method: 'POST',\r\n                body: formData,\r\n            })\r\n                // .then((response) => {\r\n                //     return response.json()\r\n                // })\r\n                .then(() => {\r\n                    const urlImg =\r\n                        'https://storage.googleapis.com/quanlinhansu/' +\r\n                        objFile.name\r\n\r\n                    console.log(urlImg)\r\n                    return urlImg\r\n                })\r\n                .catch((error) => {\r\n                    setTextMess('Upload ảnh thất bại!')\r\n                    setShowMess(true)\r\n                    setSeverityMess('error')\r\n\r\n                    console.log('Lỗi', error)\r\n                })\r\n\r\n            return fetchUploadImg\r\n        } else {\r\n            console.log('fetch not found')\r\n        }\r\n    }\r\n\r\n    function updateInfo(urlImg) {\r\n        var _item = {\r\n            MaNV: data_info_person.MaNV,\r\n            MaPB: data_info_person.MaPB,\r\n            MaCV: data_info_person.MaCV,\r\n            BaoHiem: data_info_person.BaoHiem,\r\n            LuongCoBan: data_info_person.LuongCoBan,\r\n            TypeNV: data_info_person.TypeNV,\r\n            Pass: data_info_person.Pass,\r\n\r\n            SDT: valueInputSDT,\r\n            HoTen: valueInputTen,\r\n            Avatar: urlImg ? urlImg : data_info_person.Avatar,\r\n            NgaySinh: valueInputNS,\r\n            GioiTinh: valueInputGT,\r\n            DiaChi: valueInputDC,\r\n        }\r\n\r\n        setLoading(true)\r\n\r\n        if (window.fetch) {\r\n            fetch(URL_UPDATE_NHANVIEN + TOKEN, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(_item),\r\n            })\r\n                .then((response) => {\r\n                    return response.json()\r\n                })\r\n                .then((result) => {\r\n                    // console.log('Response ' + JSON.stringify(result))\r\n                    if (result.success) {\r\n                        //Save info in session storage web\r\n                        sessionStorage.setItem(\r\n                            'info',\r\n                            JSON.stringify(result.data)\r\n                        )\r\n\r\n                        //truyền action lên store\r\n                        dispatch({\r\n                            type: UPDATE_NHANVIEN,\r\n                            value: {\r\n                                newName: result.data.HoTen,\r\n                                newImg: result.data.Avatar,\r\n                            },\r\n                        })\r\n\r\n                        setLoading(false)\r\n                        setShowMess(true)\r\n                        setTextMess('Cập nhật thành công')\r\n                        setSeverityMess('success')\r\n\r\n                        //Thêm 1 thông báo khi có 1 người cập nhật\r\n                        var objDate = new Date()\r\n                        const bodyNotify = {\r\n                            NoiDung: `${\r\n                                data_info_person.TypeNV == 1\r\n                                    ? 'Nhân viên'\r\n                                    : 'Trưởng phòng'\r\n                            } ${\r\n                                data_info_person.HoTen\r\n                            } vừa cập nhật thông tin cá nhân`,\r\n                            DateAdding: `${objDate.getFullYear()}-${\r\n                                objDate.getMonth() + 1\r\n                            }-${objDate.getDate()}`,\r\n                            TimeAt: `${objDate.getHours()}:${objDate.getMinutes()}`,\r\n                        }\r\n                        pushNotify(bodyNotify, TOKEN)\r\n\r\n                        return\r\n                    } else {\r\n                        setShowMess(true)\r\n                        setTextMess(result.mess)\r\n                        setSeverityMess('error')\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    setLoading(false)\r\n                    setShowMess(true)\r\n                    setTextMess('Cập nhật không thành công, vui lòng thử lại')\r\n                    setSeverityMess('error')\r\n                    console.log('Fetch to false', error)\r\n                })\r\n        } else {\r\n            console.log('fetch not found')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container\r\n            fluid\r\n            style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n            }}\r\n        >\r\n            <Snackbar\r\n                open={showMess}\r\n                autoHideDuration={3000}\r\n                onClose={() => {\r\n                    setShowMess(false)\r\n                }}\r\n            >\r\n                <Alert\r\n                    onClose={() => {\r\n                        setShowMess(false)\r\n                    }}\r\n                    severity={severityMess}\r\n                >\r\n                    {textMess}\r\n                </Alert>\r\n            </Snackbar>\r\n            {loading ? (\r\n                <div className={classes.iconLoad}>\r\n                    <Spinner animation=\"border\" />\r\n                </div>\r\n            ) : (\r\n                <div></div>\r\n            )}\r\n\r\n            <Paper\r\n                style={{\r\n                    width: '100%',\r\n                    height: '680px',\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    marginTop: '10px',\r\n                    backgroundColor: isDarkMode ? 'white' : darkTheme.body,\r\n                }}\r\n            >\r\n                <h1\r\n                    style={{\r\n                        textAlign: 'center',\r\n                        borderBottom: '1px solid gray',\r\n                        color: isDarkMode ? lightTheme.text : darkTheme.text,\r\n                        lineHeight: '80px',\r\n                    }}\r\n                >\r\n                    Thông tin cá nhân\r\n                </h1>\r\n                <Row>\r\n                    <Col md={4} className={classes.ColItem}>\r\n                        <img\r\n                            src={imgNhanVien}\r\n                            style={{\r\n                                width: '100px',\r\n                                height: '100px',\r\n                                borderRadius: '50%',\r\n                                marginBottom: '7px',\r\n                                objectFit: 'cover',\r\n                                backgroundColor: 'white',\r\n                            }}\r\n                        />\r\n                        <label\r\n                            for=\"chosse_img\"\r\n                            className={classes.textUploadImg}\r\n                        >\r\n                            Cập nhật ảnh đại diện\r\n                        </label>\r\n\r\n                        {isFileTypeImg ? (\r\n                            ''\r\n                        ) : (\r\n                            <span\r\n                                style={{\r\n                                    color: 'red',\r\n                                    fontSize: '17px',\r\n                                    fontWeight: '600',\r\n                                }}\r\n                            >\r\n                                {textErrorUpdateImage}\r\n                            </span>\r\n                        )}\r\n\r\n                        <input\r\n                            id=\"chosse_img\"\r\n                            type=\"file\"\r\n                            hidden\r\n                            onChange={(e) => {\r\n                                var objFile = e.target.files[0]\r\n\r\n                                if (objFile) {\r\n                                    const typeInput = objFile.type\r\n                                    if (\r\n                                        typeInput &&\r\n                                        typeInput.indexOf('image') === -1\r\n                                    ) {\r\n                                        setTextErrorUpdateImage(\r\n                                            'Chọn sai định dạng ảnh'\r\n                                        )\r\n                                        /* set 5s ẩn text */\r\n                                        setTimeout(() => {\r\n                                            setTextErrorUpdateImage('')\r\n                                        }, 5000)\r\n                                        SetIsFileTypeImg(false)\r\n                                        return\r\n                                    } else {\r\n                                        if (typeInput == 'image/png') {\r\n                                            setObjFile(objFile)\r\n                                            SetIsFileTypeImg(true)\r\n\r\n                                            // console.log(objFile)\r\n\r\n                                            const reader = new FileReader()\r\n                                            reader.onload = () => {\r\n                                                var dataURL = reader.result\r\n                                                //console.log(dataURL) //get url img\r\n                                                setImgNhanVien(dataURL)\r\n                                            }\r\n\r\n                                            try {\r\n                                                reader.readAsDataURL(\r\n                                                    e.target.files[0]\r\n                                                )\r\n                                            } catch (error) {\r\n                                                console.error(error)\r\n                                            }\r\n                                        } else {\r\n                                            SetIsFileTypeImg(false)\r\n                                            setTextErrorUpdateImage(\r\n                                                'Vui lòng chọn ảnh có đuôi .png'\r\n                                            )\r\n                                            /* set 5s ẩn text */\r\n                                            setTimeout(() => {\r\n                                                setTextErrorUpdateImage('')\r\n                                            }, 5000)\r\n                                            return\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                    <Col\r\n                        md={3}\r\n                        className={classes.ColItem}\r\n                        style={{\r\n                            alignItems: 'flex-start',\r\n                            color: '#667580',\r\n                            fontWeight: '600',\r\n                            fontSize: '17px',\r\n                        }}\r\n                    >\r\n                        <div\r\n                            style={{\r\n                                margin: '8px 0',\r\n                            }}\r\n                        >\r\n                            Mã Số:\r\n                            <span\r\n                                style={{\r\n                                    marginLeft: '8px',\r\n                                    fontSize: '17px',\r\n                                    fontWeight: '600',\r\n                                    color: isDarkMode\r\n                                        ? lightTheme.text\r\n                                        : darkTheme.text,\r\n                                }}\r\n                            >\r\n                                {data_info_person.MaNV}\r\n                            </span>\r\n                        </div>\r\n                        <div\r\n                            style={{\r\n                                margin: '8px 0',\r\n                            }}\r\n                        >\r\n                            Mã Phòng Ban:\r\n                            <span\r\n                                style={{\r\n                                    marginLeft: '8px',\r\n                                    fontSize: '17px',\r\n                                    fontWeight: '600',\r\n                                    color: isDarkMode\r\n                                        ? lightTheme.text\r\n                                        : darkTheme.text,\r\n                                }}\r\n                            >\r\n                                {data_info_person.MaPB}\r\n                            </span>\r\n                        </div>\r\n                        <div\r\n                            style={{\r\n                                margin: '8px 0',\r\n                            }}\r\n                        >\r\n                            Mã Chức Vụ:\r\n                            <span\r\n                                style={{\r\n                                    marginLeft: '8px',\r\n                                    fontSize: '17px',\r\n                                    fontWeight: '600',\r\n                                    color: isDarkMode\r\n                                        ? lightTheme.text\r\n                                        : darkTheme.text,\r\n                                }}\r\n                            >\r\n                                {data_info_person.MaCV}\r\n                            </span>\r\n                        </div>\r\n                        <div>\r\n                            Họ Tên:\r\n                            <input\r\n                                value={valueInputTen}\r\n                                type=\"text\"\r\n                                className={classes.txtInput}\r\n                                onChange={(e) => {\r\n                                    setValueInputTen(e.target.value)\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </Col>\r\n                    <Col\r\n                        md={3}\r\n                        className={classes.ColItem}\r\n                        style={{\r\n                            alignItems: 'flex-start',\r\n                            color: '#667580',\r\n                            fontWeight: '600',\r\n                            fontSize: '17px',\r\n                        }}\r\n                    >\r\n                        <div>\r\n                            Giới Tính:\r\n                            <input\r\n                                value={valueInputGT}\r\n                                type=\"text\"\r\n                                className={classes.txtInput}\r\n                                onChange={(e) => {\r\n                                    setValueInputGT(e.target.value)\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            Số Điện Thoại:\r\n                            <input\r\n                                value={valueInputSDT}\r\n                                type=\"text\"\r\n                                className={classes.txtInput}\r\n                                onChange={(e) => {\r\n                                    setValueInputSDT(e.target.value)\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            Ngày Sinh:\r\n                            {showTextFieldDate ? (\r\n                                <TextField\r\n                                    id=\"date\"\r\n                                    type=\"date\"\r\n                                    className={classes.txtInput}\r\n                                    style={{\r\n                                        marginTop: '0',\r\n                                    }}\r\n                                    defaultValue={valueInputNS}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    onChange={(e) => {\r\n                                        setValueInputNS(e.target.value)\r\n                                    }}\r\n                                />\r\n                            ) : (\r\n                                <input\r\n                                    value={valueInputNS}\r\n                                    type=\"text\"\r\n                                    className={classes.txtInput}\r\n                                />\r\n                            )}\r\n                        </div>\r\n                        <div>\r\n                            Địa Chỉ:\r\n                            <input\r\n                                value={valueInputDC}\r\n                                type=\"text\"\r\n                                className={classes.txtInput}\r\n                                onChange={(e) => {\r\n                                    setValueInputDC(e.target.value)\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </Col>\r\n                    <Col\r\n                        md={2}\r\n                        className={classes.ColItem}\r\n                        style={{\r\n                            alignItems: 'flex-start',\r\n                            color: '#667580',\r\n                            fontWeight: '600',\r\n                            fontSize: '17px',\r\n                        }}\r\n                    >\r\n                        <div\r\n                            style={{\r\n                                margin: '8px 0',\r\n                            }}\r\n                        >\r\n                            Chức Vụ:\r\n                            <span\r\n                                style={{\r\n                                    marginLeft: '8px',\r\n                                    fontSize: '17px',\r\n                                    fontWeight: '600',\r\n                                    color: isDarkMode\r\n                                        ? lightTheme.text\r\n                                        : darkTheme.text,\r\n                                }}\r\n                            >\r\n                                {data_info_person.TypeNV == 1\r\n                                    ? 'Nhân Viên'\r\n                                    : data_info_person.TypeNV == 2\r\n                                    ? 'Trưởng Phòng'\r\n                                    : ''}\r\n                            </span>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <div\r\n                    style={{\r\n                        width: '100%',\r\n                        display: 'flex',\r\n                        justifyContent: 'center',\r\n                        marginTop: '200px',\r\n                    }}\r\n                >\r\n                    <Button\r\n                        variant=\"warning\"\r\n                        className={classes.Button}\r\n                        onClick={(e) => {\r\n                            setDisableInput('auto')\r\n                            setBgInput(\r\n                                `0.5px solid ${isDarkMode ? 'black' : 'white'}`\r\n                            )\r\n                            setHiddenText('block')\r\n                            setShowTextFieldDate(true)\r\n                        }}\r\n                    >\r\n                        Cập nhật\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"success\"\r\n                        className={classes.Button}\r\n                        onClick={(e) => {\r\n                            setDisableInput('none')\r\n                            setBgInput('none')\r\n                            setHiddenText('none')\r\n\r\n                            setShowTextFieldDate(false)\r\n\r\n                            //Kiểm tra sđt\r\n                            if (!validatedPhone(valueInputSDT)) {\r\n                                setValueInputSDT(data_info_person.SDT)\r\n                                setShowMess(true)\r\n                                setTextMess('Cập nhật thất bại!')\r\n                                setSeverityMess('error')\r\n                                return\r\n                            }\r\n\r\n                            //upload img\r\n                            uploadImg('ABC').then((urlImg) => {\r\n                                // console.log(urlImg)\r\n\r\n                                // cho upload ảnh trước -> update thong tin\r\n                                updateInfo(urlImg)\r\n                            })\r\n                        }}\r\n                    >\r\n                        Lưu\r\n                    </Button>\r\n                </div>\r\n            </Paper>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ChiTietNhanVien\r\n","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\MainActivity\\Chil_Screens\\TienDoCongTrinh\\Child_Screen\\ChiTietTienDoCongTrinh.js",["223"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n//import component React Bootstrap\r\nimport Container from 'react-bootstrap/Container'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\n//Import react material-ui\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\n\r\n//import icon material\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\n\r\nimport { CircularProgressbar } from 'react-circular-progressbar'\r\nimport 'react-circular-progressbar/dist/styles.css'\r\n\r\nfunction ChiTietTienDoCongTrinh(props) {\r\n    const percentage = 66 //Phần trăm tiến độ\r\n\r\n    var stt = 0\r\n    function ItemHangMuc(props) {\r\n        stt++\r\n        return (\r\n            <TableRow hover>\r\n                <TableCell>{stt}</TableCell>\r\n                <TableCell>Xây Thô</TableCell>\r\n                <TableCell>\r\n                    <DoneIcon />\r\n                </TableCell>\r\n            </TableRow>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Container\r\n            fluid\r\n            style={{\r\n                height: '100vh',\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'center ',\r\n                    alignItems: 'center',\r\n                }}\r\n            >\r\n                <Link to=\"/Dashboard/TienDoCongTrinh\">\r\n                    <Button\r\n                        style={{\r\n                            width: '140px',\r\n                            fontSize: '17px',\r\n                        }}\r\n                    >\r\n                        Quay lại\r\n                    </Button>\r\n                </Link>\r\n                <h1 style={{ width: '100%', textAlign: 'center' }}>\r\n                    Chi Tiết Tiến Độ Công Trình\r\n                </h1>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    marginTop: '60px',\r\n                }}\r\n            >\r\n                <Paper\r\n                    style={{\r\n                        width: '40%',\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        justifyContent: 'space-between',\r\n                        alignItems: 'center',\r\n                    }}\r\n                >\r\n                    <div\r\n                        style={{\r\n                            color: 'gray',\r\n                            fontSize: '35px',\r\n                            fontWeight: '600',\r\n                            width: '100%',\r\n                            display: 'flex',\r\n                            justifyContent: 'center',\r\n                        }}\r\n                    >\r\n                        Công Trình A\r\n                    </div>\r\n                    <div\r\n                        style={{\r\n                            width: '500px',\r\n                            height: '100%',\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            justifyContent: 'center',\r\n                            alignItems: 'center',\r\n                        }}\r\n                    >\r\n                        <CircularProgressbar\r\n                            value={percentage}\r\n                            text={`${percentage}/100`}\r\n                        />\r\n                    </div>\r\n                </Paper>\r\n                <Paper\r\n                    style={{\r\n                        width: '55%',\r\n                    }}\r\n                >\r\n                    <div\r\n                        style={{\r\n                            color: 'gray',\r\n                            fontSize: '35px',\r\n                            fontWeight: '600',\r\n                            width: '100%',\r\n                            display: 'flex',\r\n                            justifyContent: 'center',\r\n                        }}\r\n                    >\r\n                        Hạng Mục\r\n                    </div>\r\n                    <TableContainer\r\n                        style={{\r\n                            maxHeight: '600px',\r\n                            width: '100%',\r\n                        }}\r\n                    >\r\n                        <Table stickyHeader aria-label=\"sticky table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>STT</TableCell>\r\n                                    <TableCell>Tên Hạng Mục</TableCell>\r\n                                    <TableCell>Hoàn Thành</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n\r\n                            <TableBody>\r\n                                <ItemHangMuc />\r\n                                <ItemHangMuc />\r\n                                <ItemHangMuc />\r\n                                <ItemHangMuc />\r\n                                <ItemHangMuc />\r\n                                <ItemHangMuc />\r\n                                <ItemHangMuc />\r\n                                <ItemHangMuc />\r\n                                <ItemHangMuc />\r\n                                <ItemHangMuc />\r\n                                <ItemHangMuc />\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Paper>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ChiTietTienDoCongTrinh\r\n","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\MainActivity\\Chil_Screens\\TienDoCongTrinh\\TienDoCongTrinh.js",["224","225","226","227"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport ChiTietTienDoCongTrinh from './Child_Screen/ChiTietTienDoCongTrinh'\r\n\r\nimport { CircularProgressbar } from 'react-circular-progressbar'\r\nimport 'react-circular-progressbar/dist/styles.css'\r\n\r\n//import component React Bootstrap\r\nimport Container from 'react-bootstrap/Container'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n\r\n//import icon react material ui\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport ReactToPrint from 'react-to-print'\r\nimport BaoCaoTienDo from '../../../../component/BaoCaoTienDo/BaoCaoTienDo'\r\nimport Modal from 'react-bootstrap/Modal'\r\n//Import react material-ui\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formSearch: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItem: 'center',\r\n        height: '100%',\r\n        padding: '0 20px',\r\n    },\r\n    searchContainer: {\r\n        border: '1px solid black',\r\n        height: '50px',\r\n        width: '100%',\r\n        borderRadius: '50px',\r\n    },\r\n    searchIcon: {\r\n        fontSize: '30px',\r\n        height: '100%',\r\n        cursor: 'pointer',\r\n        color: 'gray',\r\n    },\r\n    inputSearch: {\r\n        border: 'none',\r\n        outline: 'none',\r\n        height: '100%',\r\n        width: '100%',\r\n        fontSize: '15px',\r\n        fontWeight: '600',\r\n    },\r\n    iconLoad: {\r\n        position: 'absolute',\r\n        minHeight: '500px',\r\n        right: '0',\r\n        left: '0',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    notNetWok: {\r\n        position: 'absolute',\r\n        minHeight: '500px',\r\n        right: '0',\r\n        left: '0',\r\n        fontSize: '30px',\r\n        fontWeight: '600',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n}))\r\n\r\nfunction TienDoCongTrinh(props) {\r\n    const classes = useStyles()\r\n    const TOKEN = sessionStorage.getItem('token')\r\n    const data_info_person = JSON.parse(sessionStorage.getItem('info'))\r\n    const URL_API = 'https://qlnscloud.herokuapp.com/congtrinh2/'\r\n    const GET_CONGTRINH = 'ToanBoCongTrinh'\r\n\r\n    const [UITableTienDo, setUITableTienDo] = useState()\r\n    const [dataDSTD, setDataDSTD] = useState()\r\n    const [isNetWork, setIsNetWork] = useState(true)\r\n    const [loading, setloading] = useState(false)\r\n    const [loadDSTD, setLoadDSTD] = useState()\r\n\r\n    const componentRef = useRef(null)\r\n    const [stateModal, setStateModal] = useState({\r\n        open: false,\r\n        itemSelected: null,\r\n    })\r\n\r\n    const info_nhanvien = JSON.parse(sessionStorage.getItem('info'))\r\n\r\n    function checkNetWork() {\r\n        window.addEventListener('online', () => {\r\n            setIsNetWork(window.navigator.onLine)\r\n            console.log('online')\r\n            return\r\n        })\r\n\r\n        window.addEventListener('offline', () => {\r\n            setIsNetWork(window.navigator.onLine)\r\n            console.log('offline')\r\n            return\r\n        })\r\n    }\r\n\r\n    function getDanhSachCongTrinh() {\r\n        setloading(true)\r\n        if (window.fetch) {\r\n            fetch(URL_API + GET_CONGTRINH + '?token=' + TOKEN)\r\n                .then((response) => {\r\n                    return response.json()\r\n                })\r\n                .then((result) => {\r\n                    setloading(false)\r\n                    RenderUITableTienDoCT(result.data)\r\n                    setDataDSTD(result.data)\r\n                    setLoadDSTD(false)\r\n                })\r\n                .catch((error) => {\r\n                    setloading(false)\r\n                    console.error('Fetch to false', error)\r\n                })\r\n        } else {\r\n            console.log('Fetch not found')\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getDanhSachCongTrinh()\r\n        checkNetWork()\r\n    }, [loadDSTD])\r\n\r\n    function RenderUITableTienDoCT(data) {\r\n        setUITableTienDo(\r\n            data.map((e) => {\r\n                return ItemCT(e)\r\n            })\r\n        )\r\n    }\r\n\r\n    var stt = 0\r\n    function ItemCT(props) {\r\n        stt++\r\n        return (\r\n            <TableRow hover>\r\n                <TableCell>{stt}</TableCell>\r\n                <TableCell>{props.TenCT}</TableCell>\r\n                <TableCell>{props.DiaDiem}</TableCell>\r\n                <TableCell>{props.NgayCP}</TableCell>\r\n                <TableCell>{props.NgayKC}</TableCell>\r\n                <TableCell>{props.NgayHT}</TableCell>\r\n                <TableCell>\r\n                    <div\r\n                        style={{\r\n                            width: '55px',\r\n                        }}\r\n                    >\r\n                        <CircularProgressbar\r\n                            value={props.TienDo ? props.TienDo : 1}\r\n                            text={`${props.TienDo ? props.TienDo : 1}/100`}\r\n                        />\r\n                    </div>\r\n                </TableCell>\r\n                {data_info_person.TypeNV == 2 ? (\r\n                    <TableCell>\r\n                        <Link to=\"/Dashboard/TienDoCongTrinh/ChiTietTienDoCongTrinh\">\r\n                            <Button\r\n                                variant=\"danger\"\r\n                                style={{\r\n                                    width: '110px',\r\n                                    fontSize: '14px',\r\n                                }}\r\n                            >\r\n                                Xem Chi Tiết\r\n                            </Button>\r\n                        </Link>\r\n                    </TableCell>\r\n                ) : (\r\n                    <div></div>\r\n                )}\r\n            </TableRow>\r\n        )\r\n    }\r\n\r\n    function handleClickPrint(item) {\r\n        setStateModal({ ...stateModal, open: true, itemSelected: item })\r\n    }\r\n\r\n    function ModalShowTienDo() {\r\n        return (\r\n            <Modal\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                size=\"xl\"\r\n                show={stateModal.open}\r\n                onHide={() => setStateModal({ ...stateModal, open: false })}\r\n            >\r\n                <Modal.Body\r\n                    style={{\r\n                        overflow: 'hidden',\r\n                        padding: '0',\r\n                    }}\r\n                >\r\n                    <BaoCaoTienDo\r\n                        ref={componentRef}\r\n                        item={stateModal.itemSelected}\r\n                    />\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <ReactToPrint\r\n                        trigger={() => <Button>In</Button>}\r\n                        content={() => componentRef.current}\r\n                    />\r\n                    <Button\r\n                        variant=\"danger\"\r\n                        onClick={() => {\r\n                            setStateModal({ ...stateModal, open: false })\r\n                        }}\r\n                    >\r\n                        Hủy\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <ModalShowTienDo />\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    margin: '20px 0',\r\n                }}\r\n            >\r\n                <h1\r\n                    style={{\r\n                        width: '100%',\r\n                        textAlign: 'center',\r\n                    }}\r\n                >\r\n                    Tiến Độ Công Trình\r\n                </h1>\r\n                <Button\r\n                    variant=\"info\"\r\n                    style={{\r\n                        width: '150px',\r\n                        height: '45px',\r\n                        fontSize: '14px',\r\n                    }}\r\n                    onClick={() => {\r\n                        handleClickPrint({\r\n                            name: info_nhanvien.HoTen,\r\n                            phongBan: 'Dự Án',\r\n                            listCT: dataDSTD,\r\n                            date: new Date(),\r\n                        })\r\n                    }}\r\n                >\r\n                    In\r\n                </Button>\r\n            </div>\r\n\r\n            <Paper style={{ width: '100%' }}>\r\n                {loading ? (\r\n                    <div className={classes.iconLoad}>\r\n                        <Spinner animation=\"border\" />\r\n                    </div>\r\n                ) : (\r\n                    <div></div>\r\n                )}\r\n                {isNetWork ? (\r\n                    <div>\r\n                        <div className={classes.searchContainer}>\r\n                            <form className={classes.formSearch}>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Tìm Kiếm Công Trình\"\r\n                                    className={classes.inputSearch}\r\n                                    onChange={(event) => {\r\n                                        const textSearch = event.target.value.toLowerCase()\r\n                                        const regex = new RegExp(textSearch)\r\n                                        setUITableTienDo(\r\n                                            dataDSTD.map((e) => {\r\n                                                if (\r\n                                                    regex.test(\r\n                                                        e.TenCT.toLowerCase()\r\n                                                    ) ||\r\n                                                    regex.test(\r\n                                                        e.DiaDiem.toLowerCase()\r\n                                                    )\r\n                                                ) {\r\n                                                    return ItemCT(e)\r\n                                                }\r\n                                            })\r\n                                        )\r\n                                    }}\r\n                                />\r\n                                <SearchIcon className={classes.searchIcon} />\r\n                            </form>\r\n                        </div>\r\n                        <TableContainer\r\n                            style={{\r\n                                maxHeight: '72vh',\r\n                                width: '100%',\r\n                            }}\r\n                        >\r\n                            <Table stickyHeader aria-label=\"sticky table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>STT</TableCell>\r\n                                        <TableCell>Tên Công Trình</TableCell>\r\n                                        <TableCell>Địa Điểm</TableCell>\r\n                                        <TableCell>Ngày Cấp Phép</TableCell>\r\n                                        <TableCell>Ngày Khởi Công</TableCell>\r\n                                        <TableCell>\r\n                                            Ngày Hoàn Thành Dự Kiến\r\n                                        </TableCell>\r\n                                        <TableCell>Tiến độ</TableCell>\r\n                                        <TableCell></TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n\r\n                                <TableBody>{UITableTienDo}</TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </div>\r\n                ) : (\r\n                    <div className={classes.notNetWok}>\r\n                        Không có mạng, vui lòng thử lại\r\n                    </div>\r\n                )}\r\n            </Paper>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default TienDoCongTrinh\r\n",["228","229"],"C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\MainActivity\\Chil_Screens\\DanhSachCongTrinh.js",["230","231","232","233","234","235","236"],"import React, { useEffect, useState, useRef } from 'react'\r\n\r\nimport InputText from '../../../component/InputText/InputText'\r\nimport '../../../component/InputText/css/InputText.css'\r\n\r\n//import func valid\r\nimport {\r\n    validatedPhone,\r\n    validatedPassword,\r\n    validatedText,\r\n} from '../../../regex/regexValidated'\r\n\r\n//import api\r\nimport { pushNotify } from '../../../api/pushNotify'\r\n\r\n//import component React Bootstrap\r\nimport Container from 'react-bootstrap/Container'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n\r\n//import icon react material ui\r\nimport SearchIcon from '@material-ui/icons/Search'\r\n\r\n//Import react material-ui\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Alert from '@material-ui/lab/Alert'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formSearch: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItem: 'center',\r\n        height: '100%',\r\n        padding: '0 20px',\r\n    },\r\n    searchContainer: {\r\n        border: '1px solid black',\r\n        height: '50px',\r\n        width: '100%',\r\n        borderRadius: '50px',\r\n        backgroundColor: 'white',\r\n    },\r\n    searchIcon: {\r\n        fontSize: '30px',\r\n        height: '100%',\r\n        cursor: 'pointer',\r\n        color: 'gray',\r\n    },\r\n    inputSearch: {\r\n        border: 'none',\r\n        outline: 'none',\r\n        height: '100%',\r\n        width: '100%',\r\n        fontSize: '15px',\r\n        fontWeight: '600',\r\n    },\r\n    notNetWok: {\r\n        position: 'absolute',\r\n        minHeight: '500px',\r\n        right: '0',\r\n        left: '0',\r\n        fontSize: '30px',\r\n        fontWeight: '600',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    iconLoad: {\r\n        position: 'absolute',\r\n        minHeight: '500px',\r\n        right: '0',\r\n        left: '0',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    itemDialog: {\r\n        fontSize: '20px',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n    },\r\n}))\r\n\r\nvar lengthDSCT\r\n\r\nfunction DSCongTrinh(props) {\r\n    const URL_API = 'https://qlnscloud.herokuapp.com/congtrinh2/'\r\n    const GET_CONGTRINH = 'ToanBoCongTrinh'\r\n    const DEL_CONGTRINH = 'XoaCongTrinh'\r\n    const ADD_CONGTRINH = 'ThemCongTrinh'\r\n    const UPDATE_CONGTRINH = 'CapNhatCongTrinh'\r\n    const TOKEN = sessionStorage.getItem('token')\r\n    const data_info_person = JSON.parse(sessionStorage.getItem('info'))\r\n\r\n    const [dataDSCT, setDataDSCT] = useState()\r\n\r\n    const [UITableCongTrinh, setUITableCongTrinh] = useState()\r\n    const [isNetWork, setIsNetWork] = useState(true)\r\n    const [showDialogCreateCT, setShowDialogCreateCT] = useState(false)\r\n    const [showDialogDeleteCT, setShowDialogDeleteCT] = useState(false)\r\n    const [showDialogUpdateCT, setShowDialogUpdateCT] = useState(false)\r\n    const [loading, setloading] = useState(false)\r\n    const [thongTinCongTrinh, setThongTinCongTrinh] = useState()\r\n    const [loadDSCT, setLoadDSCT] = useState(false)\r\n    const [showMess, setShowMess] = useState(false)\r\n    const [textMess, setTextMess] = useState('')\r\n    const [severityMess, setSeverityMess] = useState('')\r\n\r\n    function checkNetWork() {\r\n        window.addEventListener('online', () => {\r\n            setIsNetWork(window.navigator.onLine)\r\n            console.log('online')\r\n            return\r\n        })\r\n\r\n        window.addEventListener('offline', () => {\r\n            setIsNetWork(window.navigator.onLine)\r\n            console.log('offline')\r\n            return\r\n        })\r\n    }\r\n\r\n    function getDanhSachCongTrinh() {\r\n        setloading(true)\r\n        if (window.fetch) {\r\n            fetch(URL_API + GET_CONGTRINH + '?token=' + TOKEN)\r\n                .then((response) => {\r\n                    return response.json()\r\n                })\r\n                .then((result) => {\r\n                    lengthDSCT = result.data.length\r\n                    RenderUITableCongTrinh(result.data)\r\n                    setDataDSCT(result.data)\r\n                    setloading(false)\r\n                    setLoadDSCT(false)\r\n                })\r\n                .catch((error) => {\r\n                    setloading(false)\r\n                    console.error('Fetch to false', error)\r\n                })\r\n        } else {\r\n            console.log('Fetch not found')\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        checkNetWork()\r\n        getDanhSachCongTrinh()\r\n    }, [loadDSCT])\r\n\r\n    const classes = useStyles()\r\n\r\n    var stt = 0\r\n    function ItemCongTrinh(props) {\r\n        stt++\r\n        return (\r\n            <TableRow hover>\r\n                <TableCell>{stt}</TableCell>\r\n                <TableCell>{props.TenCT}</TableCell>\r\n                {/* <TableCell>{props.SLNV}</TableCell> */}\r\n                <TableCell>{props.DiaDiem}</TableCell>\r\n                <TableCell>{props.NgayCP}</TableCell>\r\n                <TableCell>{props.NgayKC}</TableCell>\r\n                <TableCell>{props.NgayHT}</TableCell>\r\n\r\n                {data_info_person.TypeNV == 2 ? (\r\n                    <TableCell\r\n                        style={{\r\n                            display: 'flex',\r\n                            justifyContent: 'center',\r\n                        }}\r\n                    >\r\n                        <Button\r\n                            variant=\"outline-danger\"\r\n                            style={{\r\n                                width: '100px',\r\n                                fontSize: '17px',\r\n                            }}\r\n                            onClick={() => {\r\n                                setThongTinCongTrinh(props)\r\n                                setShowDialogUpdateCT(true)\r\n                            }}\r\n                        >\r\n                            Cập nhật\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"danger\"\r\n                            style={{\r\n                                marginLeft: '5px',\r\n                                width: '100px',\r\n                                fontSize: '17px',\r\n                            }}\r\n                            onClick={() => {\r\n                                console.log('Xóa công trình')\r\n                                setThongTinCongTrinh(props)\r\n                                setShowDialogDeleteCT(true)\r\n                            }}\r\n                        >\r\n                            Xóa\r\n                        </Button>\r\n                    </TableCell>\r\n                ) : (\r\n                    <div></div>\r\n                )}\r\n            </TableRow>\r\n        )\r\n    }\r\n\r\n    function RenderUITableCongTrinh(data) {\r\n        setUITableCongTrinh(\r\n            data.map((e) => {\r\n                return ItemCongTrinh(e)\r\n            })\r\n        )\r\n    }\r\n\r\n    function ModalDialogUpdateCongTrinh() {\r\n        const objThongTinCT = { ...thongTinCongTrinh }\r\n\r\n        const [updateTenCT, setUpdateTenCT] = useState()\r\n        const [updateDiaDiem, setUpdateDiaDiem] = useState()\r\n        const [updateNgayCP, setUpdateNgayCP] = useState(objThongTinCT.NgayCP)\r\n        const [updateNgayKC, setUpdateNgayKC] = useState(objThongTinCT.NgayKC)\r\n        const [updateNgayHT, setUpdateNgayHT] = useState(objThongTinCT.NgayHT)\r\n\r\n        function updateCongTrinh() {\r\n            if (window.fetch) {\r\n                fetch(URL_API + UPDATE_CONGTRINH + '?token=' + TOKEN, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        MaCT: objThongTinCT.MaCT,\r\n                        TenCT: updateTenCT ? updateTenCT : objThongTinCT.TenCT,\r\n                        DiaDiem: updateDiaDiem\r\n                            ? updateDiaDiem\r\n                            : objThongTinCT.DiaDiem,\r\n                        NgayCP: updateNgayCP,\r\n                        NgayKC: updateNgayKC,\r\n                        NgayHT: updateNgayHT,\r\n                    }),\r\n                })\r\n                    .then((response) => {\r\n                        return response.json()\r\n                    })\r\n                    .then((result) => {\r\n                        if (result.success) {\r\n                            setLoadDSCT(true)\r\n                            setShowMess(true)\r\n                            setTextMess('Cập nhật công trình thành công!')\r\n                            setSeverityMess('success')\r\n\r\n                            //Thêm thông báo cập nhật ct thành công\r\n                            const objDate = new Date()\r\n                            const bodyNoti = {\r\n                                NoiDung: `Công trình ${objThongTinCT.TenCT} vừa được cập nhật`,\r\n                                DateAdding: `${objDate.getFullYear()}-${\r\n                                    objDate.getMonth() + 1\r\n                                }-${objDate.getDate()}`,\r\n                                TimeAt: `${objDate.getHours()}:${objDate.getMinutes()}`,\r\n                            }\r\n                            pushNotify(bodyNoti, TOKEN)\r\n                            return\r\n                        } else {\r\n                            setShowMess(true)\r\n                            setTextMess(result.mess)\r\n                            setSeverityMess('error')\r\n                            return\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Lỗi', error)\r\n                    })\r\n            } else {\r\n                console.log('fetch not found')\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                show={showDialogUpdateCT}\r\n                onHide={() => setShowDialogUpdateCT(false)}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <h3>Cập nhật công trình</h3>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <InputText\r\n                        placeholder=\"Tên công trình\"\r\n                        setInputContent={setUpdateTenCT}\r\n                    />\r\n                    <InputText\r\n                        placeholder=\"Địa điểm\"\r\n                        setInputContent={setUpdateDiaDiem}\r\n                    />\r\n\r\n                    <div className=\"input\">\r\n                        <TextField\r\n                            id=\"date\"\r\n                            label=\"Ngày cấp phép\"\r\n                            type=\"date\"\r\n                            className=\"input-content\"\r\n                            defaultValue={updateNgayCP}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={(e) => {\r\n                                setUpdateNgayCP(e.target.value)\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"input\">\r\n                        <TextField\r\n                            id=\"date\"\r\n                            label=\"Ngày khởi công\"\r\n                            type=\"date\"\r\n                            defaultValue={updateNgayKC}\r\n                            className=\"input-content\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={(e) => {\r\n                                setUpdateNgayKC(e.target.value)\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input\">\r\n                        <TextField\r\n                            id=\"date\"\r\n                            label=\"Ngày hoàn thành dự kiến\"\r\n                            type=\"date\"\r\n                            defaultValue={updateNgayHT}\r\n                            className=\"input-content\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={(e) => {\r\n                                setUpdateNgayHT(e.target.value)\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button\r\n                        variant=\"secondary\"\r\n                        onClick={() => setShowDialogUpdateCT(false)}\r\n                    >\r\n                        Hủy Bỏ\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        onClick={() => {\r\n                            updateCongTrinh()\r\n                            setShowDialogUpdateCT(false)\r\n                        }}\r\n                    >\r\n                        Cập Nhật\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    function ModalDialogDelCongTrinh() {\r\n        const objTTCT = { ...thongTinCongTrinh }\r\n        const [sdt, setSdt] = useState()\r\n        const [pass, setPass] = useState()\r\n\r\n        function delCongTrinh() {\r\n            if (window.fetch) {\r\n                console.log(\r\n                    JSON.stringify({\r\n                        MaCT: objTTCT.MaCT,\r\n                        SDT: sdt,\r\n                        Pass: pass,\r\n                    })\r\n                )\r\n                fetch(URL_API + DEL_CONGTRINH + '?token=' + TOKEN, {\r\n                    method: 'DELETE',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        MaCT: objTTCT.MaCT,\r\n                        SDT: sdt,\r\n                        Pass: pass,\r\n                    }),\r\n                })\r\n                    .then((response) => {\r\n                        return response.json()\r\n                    })\r\n                    .then((result) => {\r\n                        console.log(result)\r\n                        if (result.success) {\r\n                            setLoadDSCT(true)\r\n                            setShowMess(true)\r\n                            setTextMess('Xóa công trình thành công!')\r\n                            setSeverityMess('success')\r\n\r\n                            // Thêm thông báo xóa ct\r\n                            const objDate = new Date()\r\n                            const bodyNoti = {\r\n                                NoiDung: `Công trình ${objTTCT.TenCT} vừa được xóa`,\r\n                                DateAdding: `${objDate.getFullYear()}-${\r\n                                    objDate.getMonth() + 1\r\n                                }-${objDate.getDate()}`,\r\n                                TimeAt: `${objDate.getHours()}:${objDate.getMinutes()}`,\r\n                            }\r\n                            pushNotify(bodyNoti, TOKEN)\r\n\r\n                            return\r\n                        } else {\r\n                            setShowMess(true)\r\n                            setTextMess(result.mess)\r\n                            setSeverityMess('error')\r\n                            return\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Lỗi', error)\r\n                    })\r\n            } else {\r\n                console.log('fetch not found')\r\n            }\r\n        }\r\n\r\n        function ItemDialogDel(props) {\r\n            return (\r\n                <div className={classes.itemDialog}>\r\n                    <span>{props.label}</span>\r\n                    <span style={{ fontWeight: '600', color: 'gray' }}>\r\n                        {props.data}\r\n                    </span>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                show={showDialogDeleteCT}\r\n                onHide={() => setShowDialogDeleteCT(false)}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <h5>Bạn có muốn xóa công trình này ?</h5>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div\r\n                        style={{\r\n                            padding: '0 30px',\r\n                        }}\r\n                    >\r\n                        <ItemDialogDel\r\n                            label=\"Tên Công Trình: \"\r\n                            data={objTTCT.TenCT}\r\n                        />\r\n                        <ItemDialogDel\r\n                            label=\"Địa Điểm: \"\r\n                            data={objTTCT.DiaDiem}\r\n                        />\r\n                        <ItemDialogDel\r\n                            label=\"Ngày Cấp Phép: \"\r\n                            data={objTTCT.NgayCP}\r\n                        />\r\n                        <ItemDialogDel\r\n                            label=\"Ngày Khởi Công: \"\r\n                            data={objTTCT.NgayKC}\r\n                        />\r\n                        <ItemDialogDel\r\n                            label=\"Ngày Hoàn Thành Dự Kiến: \"\r\n                            data={objTTCT.NgayHT}\r\n                        />\r\n                    </div>\r\n                    <hr />\r\n                    <h5>Nhập tài khoản xác nhận</h5>\r\n                    <InputText\r\n                        type=\"number\"\r\n                        placeholder=\"Số điện thoại\"\r\n                        setInputContent={setSdt}\r\n                    />\r\n                    <InputText\r\n                        type=\"password\"\r\n                        placeholder=\"Mật khẩu\"\r\n                        setInputContent={setPass}\r\n                    />\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button\r\n                        variant=\"secondary\"\r\n                        onClick={() => setShowDialogDeleteCT(false)}\r\n                    >\r\n                        Từ Chối\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        onClick={() => {\r\n                            if (\r\n                                validatedText(sdt, 'số điện thoại') &&\r\n                                validatedText(pass, 'mật khẩu')\r\n                            ) {\r\n                                delCongTrinh()\r\n                                setShowDialogDeleteCT(false)\r\n                                return\r\n                            }\r\n                        }}\r\n                    >\r\n                        Đồng Ý\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    function ModalDialogCreateCT() {\r\n        const [tenCT, setTenCT] = useState()\r\n        const [diaDiem, setDiaDiem] = useState()\r\n        const [ngayCP, setNgayCP] = useState()\r\n        const [ngayKC, setNgayKC] = useState()\r\n        const [ngayHT, setNgayHT] = useState()\r\n\r\n        function createCongTrinh() {\r\n            if (window.fetch) {\r\n                fetch(URL_API + ADD_CONGTRINH + '?token=' + TOKEN, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        TenCT: tenCT,\r\n                        DiaDiem: diaDiem,\r\n                        NgayCP: ngayCP,\r\n                        NgayKC: ngayKC,\r\n                        NgayHT: ngayHT,\r\n                        TienDo: 0,\r\n                    }),\r\n                })\r\n                    .then((response) => {\r\n                        return response.json()\r\n                    })\r\n                    .then((result) => {\r\n                        if (result.success) {\r\n                            setLoadDSCT(true)\r\n                            setShowMess(true)\r\n                            setTextMess('Tạo công trình thành công!')\r\n                            setSeverityMess('success')\r\n\r\n                            //Thêm thông báo thêm 1 công trình thành công\r\n                            var objDate = new Date()\r\n                            const bodyNoti = {\r\n                                NoiDung: '1 công trình vừa được thêm',\r\n                                DateAdding: `${objDate.getFullYear()}-${\r\n                                    objDate.getMonth() + 1\r\n                                }-${objDate.getDate()}`,\r\n                                TimeAt: `${objDate.getHours()}:${objDate.getMinutes()}`,\r\n                            }\r\n                            pushNotify(bodyNoti, TOKEN)\r\n\r\n                            return\r\n                        } else {\r\n                            setShowMess(true)\r\n                            setTextMess(result.mess)\r\n                            setSeverityMess('error')\r\n                            return\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Lỗi', error)\r\n                    })\r\n                setloading(false)\r\n            } else {\r\n                console.log('fetch not found')\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                show={showDialogCreateCT}\r\n                onHide={() => setShowDialogCreateCT(false)}\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <h4\r\n                        style={{\r\n                            color: 'black',\r\n                        }}\r\n                    >\r\n                        Đăng Kí Công Trình\r\n                    </h4>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <InputText\r\n                        placeholder=\"Tên công trình\"\r\n                        setInputContent={setTenCT}\r\n                    />\r\n                    <InputText\r\n                        placeholder=\"Địa điểm\"\r\n                        setInputContent={setDiaDiem}\r\n                    />\r\n\r\n                    <div className=\"input\">\r\n                        <TextField\r\n                            id=\"date\"\r\n                            label=\"Ngày cấp phép\"\r\n                            type=\"date\"\r\n                            className=\"input-content\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={(e) => {\r\n                                setNgayCP(e.target.value)\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"input\">\r\n                        <TextField\r\n                            id=\"date\"\r\n                            label=\"Ngày khởi công\"\r\n                            type=\"date\"\r\n                            className=\"input-content\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={(e) => {\r\n                                setNgayKC(e.target.value)\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input\">\r\n                        <TextField\r\n                            id=\"date\"\r\n                            label=\"Ngày hoàn thành dự kiến\"\r\n                            type=\"date\"\r\n                            className=\"input-content\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={(e) => {\r\n                                setNgayHT(e.target.value)\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button\r\n                        variant=\"secondary\"\r\n                        onClick={() => setShowDialogCreateCT(false)}\r\n                    >\r\n                        Đóng\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        onClick={() => {\r\n                            if (\r\n                                validatedText(tenCT, 'tên công trình') &&\r\n                                validatedText(diaDiem, 'địa điểm') &&\r\n                                validatedText(ngayCP, 'ngày cấp phép') &&\r\n                                validatedText(ngayKC, 'ngày khởi công') &&\r\n                                validatedText(ngayHT, 'ngày hoàn thành')\r\n                            ) {\r\n                                createCongTrinh()\r\n                                setShowDialogCreateCT(false)\r\n                                return\r\n                            }\r\n                        }}\r\n                    >\r\n                        Tạo\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <ModalDialogDelCongTrinh />\r\n            <ModalDialogCreateCT />\r\n            <ModalDialogUpdateCongTrinh />\r\n            <Snackbar\r\n                open={showMess}\r\n                autoHideDuration={3000}\r\n                onClose={() => {\r\n                    setShowMess(false)\r\n                }}\r\n            >\r\n                <Alert\r\n                    onClose={() => {\r\n                        setShowMess(false)\r\n                    }}\r\n                    severity={severityMess}\r\n                >\r\n                    {textMess}\r\n                </Alert>\r\n            </Snackbar>\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    margin: '20px 0',\r\n                }}\r\n            >\r\n                <h1\r\n                    style={{\r\n                        width: '100%',\r\n                        textAlign: 'center',\r\n                    }}\r\n                >\r\n                    Danh Sách Công Trình\r\n                </h1>\r\n                {data_info_person.TypeNV == 2 ? (\r\n                    <Button\r\n                        style={{\r\n                            width: '200px',\r\n                            height: '50px',\r\n                            alignSelf: 'flex-end',\r\n                        }}\r\n                        onClick={() => {\r\n                            setShowDialogCreateCT(true)\r\n                            console.log('Thêm một công trình')\r\n                        }}\r\n                    >\r\n                        Thêm Công Trình\r\n                    </Button>\r\n                ) : (\r\n                    <div></div>\r\n                )}\r\n            </div>\r\n            <Paper style={{ width: '100%' }}>\r\n                {loading ? (\r\n                    <div className={classes.iconLoad}>\r\n                        <Spinner animation=\"border\" />\r\n                    </div>\r\n                ) : (\r\n                    <div></div>\r\n                )}\r\n\r\n                {isNetWork ? (\r\n                    <div>\r\n                        <div className={classes.searchContainer}>\r\n                            <form className={classes.formSearch}>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Tìm Kiếm Công Trình\"\r\n                                    className={classes.inputSearch}\r\n                                    onChange={(event) => {\r\n                                        const textSearch = event.target.value.toLowerCase()\r\n                                        const regex = new RegExp(textSearch)\r\n                                        setUITableCongTrinh(\r\n                                            dataDSCT.map((e) => {\r\n                                                if (\r\n                                                    regex.test(\r\n                                                        e.TenCT.toLowerCase()\r\n                                                    ) ||\r\n                                                    regex.test(\r\n                                                        e.DiaDiem.toLowerCase()\r\n                                                    )\r\n                                                ) {\r\n                                                    return ItemCongTrinh(e)\r\n                                                }\r\n                                            })\r\n                                        )\r\n                                    }}\r\n                                />\r\n                                <SearchIcon className={classes.searchIcon} />\r\n                            </form>\r\n                        </div>\r\n                        <TableContainer\r\n                            style={{\r\n                                maxHeight: '65vh',\r\n                                width: '100%',\r\n                            }}\r\n                        >\r\n                            <Table stickyHeader aria-label=\"sticky table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>STT</TableCell>\r\n                                        <TableCell>Tên Công Trình</TableCell>\r\n                                        {/* <TableCell>\r\n                                            Số Lượng Nhân Viên\r\n                                        </TableCell> */}\r\n                                        <TableCell>\r\n                                            Địa Điểm Công Trình\r\n                                        </TableCell>\r\n                                        <TableCell>Ngày Cấp Phép</TableCell>\r\n                                        <TableCell>Ngày Khởi Công</TableCell>\r\n                                        <TableCell>\r\n                                            Ngày Hoàn Thành Dự Kiến\r\n                                        </TableCell>\r\n                                        <TableCell></TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n\r\n                                <TableBody>{UITableCongTrinh}</TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </div>\r\n                ) : (\r\n                    <div className={classes.notNetWok}>\r\n                        Không có mạng, vui lòng thử lại\r\n                    </div>\r\n                )}\r\n            </Paper>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default DSCongTrinh\r\nexport { lengthDSCT }\r\n","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\component\\TextForm\\TextForm.js",[],"C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\MainActivity\\Chil_Screens\\BangLuong.js",["237","238","239","240","241","242"],"C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\regex\\regexValidated.js",["243"],"export function validatedPhone(numberPhone) {\r\n    var regexPhone = /((09|03|07|08|05)+([0-9]{8})\\b)/g\r\n\r\n    if (numberPhone) {\r\n        if (regexPhone.test(numberPhone) == false) {\r\n            alert('Số điện thoại của bạn không đúng định dạng!')\r\n            return false\r\n        } else {\r\n            return true\r\n        }\r\n    } else {\r\n        alert('Bạn chưa điền số điện thoại!')\r\n        return false\r\n    }\r\n}\r\n\r\nexport function validatedPassword(password) {\r\n    if (password) {\r\n        if (password.length >= 6) {\r\n            return true\r\n        } else {\r\n            alert('Mật khẩu phải lớn hơn hoặc bằng 6 kí tự')\r\n            return false\r\n        }\r\n    } else {\r\n        alert('Bạn chưa điền mật khẩu')\r\n        return false\r\n    }\r\n}\r\n\r\nexport function validatedText(text, message) {\r\n    if (text) {\r\n        return true\r\n    } else {\r\n        alert(`Bạn chưa điền vào ${message}`)\r\n        return false\r\n    }\r\n}\r\n","C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\api\\pushNotify.js",[],"C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\activity\\MainActivity\\Chil_Screens\\DanhSachNhanVien.js",["244","245","246","247","248","249"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n//import func valid\r\nimport {\r\n    validatedPhone,\r\n    validatedPassword,\r\n    validatedText,\r\n} from '../../../regex/regexValidated'\r\n\r\nimport InputText from '../../../component/InputText/InputText'\r\nimport '../../../component/InputText/css/InputText.css'\r\n\r\n//import api\r\nimport { pushNotify } from '../../../api/pushNotify'\r\n\r\n//import component React Bootstrap\r\nimport Container from 'react-bootstrap/Container'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n\r\n//import icon react material ui\r\nimport SearchIcon from '@material-ui/icons/Search'\r\n\r\n//Import react material-ui\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Alert from '@material-ui/lab/Alert'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formSearch: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItem: 'center',\r\n        height: '100%',\r\n        padding: '0 20px',\r\n    },\r\n    searchContainer: {\r\n        border: '1px solid black',\r\n        height: '50px',\r\n        width: '100%',\r\n        borderRadius: '50px',\r\n    },\r\n    searchIcon: {\r\n        fontSize: '30px',\r\n        height: '100%',\r\n        cursor: 'pointer',\r\n        color: 'gray',\r\n    },\r\n    inputSearch: {\r\n        border: 'none',\r\n        outline: 'none',\r\n        height: '100%',\r\n        width: '100%',\r\n        fontSize: '15px',\r\n        fontWeight: '600',\r\n    },\r\n\r\n    itemDialog: {\r\n        fontSize: '20px',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n    },\r\n    notNetWok: {\r\n        position: 'absolute',\r\n        minHeight: '500px',\r\n        right: '0',\r\n        left: '0',\r\n        fontSize: '30px',\r\n        fontWeight: '600',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    iconLoad: {\r\n        position: 'absolute',\r\n        minHeight: '500px',\r\n        right: '0',\r\n        left: '0',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        zIndex: '10',\r\n    },\r\n}))\r\n\r\nvar lengthDSNV\r\n\r\nfunction DSNhanVien(props) {\r\n    const classes = useStyles()\r\n\r\n    const data_info_person = JSON.parse(sessionStorage.getItem('info'))\r\n\r\n    const GET_ALL_NHANVIEN =\r\n        'https://qlnscloud.herokuapp.com/account2/allNhanVien'\r\n    const DEL_NHANVIEN =\r\n        'https://qlnscloud.herokuapp.com/truongphong2/XoaNhanVien'\r\n    const TOKEN = sessionStorage.getItem('token')\r\n\r\n    const [dataDSNV, setDataDSNV] = useState()\r\n\r\n    const URL_UPDATE_NHANVIEN =\r\n        'https://qlnscloud.herokuapp.com/account2/CapNhatThongTin'\r\n\r\n    const URL_CREATE_NHANVIEN =\r\n        'https://qlnscloud.herokuapp.com/account2/create'\r\n\r\n    const [UITableNhanVien, setUITableNhanVien] = useState()\r\n    const [loading, setloading] = useState()\r\n    const [isNetWork, setIsNetWork] = useState(true)\r\n    const [showDialogDelete, setShowDialogDelete] = useState(false)\r\n    const [showDialogUpdate, setShowDialogUpdate] = useState(false)\r\n    const [InfoNhanVien, setInfoNhanVien] = useState()\r\n    const [modalShowDialogCreateNV, setModalShowDialogCreateNV] = useState(\r\n        false\r\n    )\r\n\r\n    const [loadDSNV, setLoadDSNV] = useState(false)\r\n\r\n    const [showMess, setShowMess] = useState(false)\r\n    const [textMess, setTextMess] = useState('')\r\n    const [severityMess, setSeverityMess] = useState('')\r\n\r\n    var history = useHistory()\r\n\r\n    function checkNetWork() {\r\n        window.addEventListener('online', () => {\r\n            setIsNetWork(window.navigator.onLine)\r\n            console.log('online')\r\n            return\r\n        })\r\n\r\n        window.addEventListener('offline', () => {\r\n            setIsNetWork(window.navigator.onLine)\r\n            console.log('offline')\r\n            return\r\n        })\r\n    }\r\n\r\n    function getDanhSachNhanVien() {\r\n        setloading(true)\r\n        if (window.fetch) {\r\n            fetch(GET_ALL_NHANVIEN + '?token=' + TOKEN)\r\n                .then((response) => {\r\n                    return response.json()\r\n                })\r\n                .then((result) => {\r\n                    lengthDSNV = result.data.length\r\n                    setDataDSNV(result.data)\r\n                    RenderUITableNhanVien(result.data)\r\n                    setloading(false)\r\n                    setLoadDSNV(false)\r\n                })\r\n                .catch((error) => {\r\n                    setloading(false)\r\n                    console.error('Fetch to false', error)\r\n                })\r\n        } else {\r\n            console.log('Fetch not found')\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        checkNetWork()\r\n        getDanhSachNhanVien()\r\n    }, [loadDSNV])\r\n\r\n    var stt = 0\r\n    function ItemNV(props) {\r\n        stt++\r\n        return (\r\n            <TableRow hover>\r\n                <TableCell>{stt}</TableCell>\r\n                <TableCell>{props.HoTen}</TableCell>\r\n                <TableCell>{props.GioiTinh}</TableCell>\r\n                <TableCell>{props.NgaySinh}</TableCell>\r\n                <TableCell>{props.DiaChi}</TableCell>\r\n                {data_info_person.TypeNV == 2 ? (\r\n                    <TableCell\r\n                        style={{\r\n                            display: 'flex',\r\n                            justifyContent: 'center',\r\n                        }}\r\n                    >\r\n                        <Button\r\n                            variant=\"outline-danger\"\r\n                            style={{\r\n                                width: '100px',\r\n                                fontSize: '17px',\r\n                            }}\r\n                            onClick={() => {\r\n                                setShowDialogUpdate(true)\r\n                                setInfoNhanVien(props)\r\n                            }}\r\n                        >\r\n                            Cập nhật\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"danger\"\r\n                            style={{\r\n                                marginLeft: '5px',\r\n                                width: '100px',\r\n                                fontSize: '17px',\r\n                            }}\r\n                            onClick={() => {\r\n                                console.log('Xóa nhân viên')\r\n                                setInfoNhanVien(props)\r\n                                setShowDialogDelete(true)\r\n                            }}\r\n                        >\r\n                            Xóa\r\n                        </Button>\r\n                    </TableCell>\r\n                ) : (\r\n                    <div></div>\r\n                )}\r\n            </TableRow>\r\n        )\r\n    }\r\n\r\n    function RenderUITableNhanVien(data) {\r\n        setUITableNhanVien(\r\n            data.map((e) => {\r\n                return ItemNV(e)\r\n            })\r\n        )\r\n    }\r\n\r\n    function ModalDialogUpdateNV() {\r\n        const nhanVien = { ...InfoNhanVien }\r\n\r\n        const [sdt, setSdt] = useState()\r\n        const [hoTen, setHoTen] = useState()\r\n        const [pass, setPass] = useState()\r\n        const [ngaySinh, setNgaySinh] = useState()\r\n        const [gioiTinh, setGioiTinh] = useState()\r\n        const [diaChi, setDiaChi] = useState()\r\n\r\n        const itemBodyRequest = {\r\n            MaNV: nhanVien.MaNV,\r\n            MaPB: nhanVien.MaPB,\r\n            MaCV: nhanVien.MaCV,\r\n            Avatar: nhanVien.Avatar,\r\n            BaoHiem: nhanVien.BaoHiem,\r\n            LuongCoBan: nhanVien.LuongCoBan,\r\n            TypeNV: data_info_person.TypeNV,\r\n\r\n            SDT: sdt ? sdt : nhanVien.SDT,\r\n            HoTen: hoTen ? hoTen : nhanVien.HoTen,\r\n            Pass: pass ? pass : nhanVien.Pass,\r\n            NgaySinh: ngaySinh ? ngaySinh : nhanVien.NgaySinh,\r\n            GioiTinh: gioiTinh ? gioiTinh : nhanVien.GioiTinh,\r\n            DiaChi: diaChi ? diaChi : nhanVien.DiaChi,\r\n        }\r\n\r\n        function updateNV() {\r\n            fetch(URL_UPDATE_NHANVIEN + '?token=' + TOKEN, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(itemBodyRequest),\r\n            })\r\n                .then((response) => {\r\n                    return response.json()\r\n                })\r\n                .then((result) => {\r\n                    console.log(result)\r\n                    if (result.success) {\r\n                        if (result.data.MaNV === data_info_person.MaNV) {\r\n                            sessionStorage.setItem(\r\n                                'info',\r\n                                JSON.stringify(result.data)\r\n                            )\r\n                        }\r\n\r\n                        setLoadDSNV(true)\r\n                        setShowMess(true)\r\n                        setTextMess('Cập nhật nhân viên thành công!')\r\n                        setSeverityMess('success')\r\n\r\n                        //Thêm thông báo cập nhật nhân viên thành công\r\n                        const objDate = new Date()\r\n                        const bodyNoti = {\r\n                            NoiDung: `Nhân viên ${nhanVien.HoTen} vừa được cập nhật thông tin`,\r\n                            DateAdding: `${objDate.getFullYear()}-${\r\n                                objDate.getMonth() + 1\r\n                            }-${objDate.getDate()}`,\r\n                            TimeAt: `${objDate.getHours()}:${objDate.getMinutes()}`,\r\n                        }\r\n                        pushNotify(bodyNoti, TOKEN)\r\n                        return\r\n                    } else {\r\n                        setShowMess(true)\r\n                        setTextMess(result.mess)\r\n                        setSeverityMess('error')\r\n                        return\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log('Lỗi', error)\r\n                })\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                show={showDialogUpdate}\r\n                onHide={() => setShowDialogUpdate(false)}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <h5>Cập nhật nhân viên</h5>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <InputText\r\n                        type=\"number\"\r\n                        placeholder=\"Số điện thoại\"\r\n                        setInputContent={setSdt}\r\n                    />\r\n                    <InputText\r\n                        placeholder=\"Họ tên\"\r\n                        setInputContent={setHoTen}\r\n                    />\r\n                    <InputText\r\n                        type=\"password\"\r\n                        placeholder=\"Mật khẩu\"\r\n                        setInputContent={setPass}\r\n                    />\r\n                    <div className=\"input\">\r\n                        <TextField\r\n                            id=\"date\"\r\n                            label=\"Ngày sinh\"\r\n                            type=\"date\"\r\n                            className=\"input-content\"\r\n                            defaultValue={nhanVien.NgaySinh}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={(e) => {\r\n                                setNgaySinh(e.target.value)\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <InputText\r\n                        placeholder=\"Giới tính\"\r\n                        setInputContent={setGioiTinh}\r\n                    />\r\n                    <InputText\r\n                        placeholder=\"Địa chỉ\"\r\n                        setInputContent={setDiaChi}\r\n                    />\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button\r\n                        variant=\"secondary\"\r\n                        onClick={() => setShowDialogUpdate(false)}\r\n                    >\r\n                        Từ Chối\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        onClick={() => {\r\n                            updateNV()\r\n                            setShowDialogUpdate(false)\r\n                            return\r\n                        }}\r\n                    >\r\n                        Đồng Ý\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    function ModalDialogDelNV() {\r\n        const nhanVien = { ...InfoNhanVien }\r\n        const [sdt, setSdt] = useState()\r\n        const [pass, setPass] = useState()\r\n\r\n        function delNhanVien() {\r\n            console.log(\r\n                JSON.stringify({\r\n                    MaNV: nhanVien.MaNV,\r\n                    SDT: sdt,\r\n                    Pass: pass,\r\n                })\r\n            )\r\n            console.log(TOKEN)\r\n            fetch(DEL_NHANVIEN + '?token=' + TOKEN, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    MaNV: nhanVien.MaNV,\r\n                    SDT: sdt,\r\n                    Pass: pass,\r\n                }),\r\n            })\r\n                .then((response) => {\r\n                    return response.json()\r\n                })\r\n                .then((result) => {\r\n                    console.log(result)\r\n                    if (result.success) {\r\n                        setLoadDSNV(true)\r\n                        setShowMess(true)\r\n                        setTextMess('Xóa nhân viên thành công!')\r\n                        setSeverityMess('success')\r\n\r\n                        //Thêm thông báo xóa nv thành công\r\n                        const objDate = new Date()\r\n                        const bodyNoti = {\r\n                            NoiDung: `Nhân viên ${nhanVien.HoTen} vừa được xóa`,\r\n                            DateAdding: `${objDate.getFullYear()}-${\r\n                                objDate.getMonth() + 1\r\n                            }-${objDate.getDate()}`,\r\n                            TimeAt: `${objDate.getHours()}:${objDate.getMinutes()}`,\r\n                        }\r\n                        pushNotify(bodyNoti, TOKEN)\r\n                        return\r\n                    } else {\r\n                        setShowMess(true)\r\n                        setTextMess('Xóa nhân viên thất bại!')\r\n                        setSeverityMess('error')\r\n                        return\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log('Lỗi', error)\r\n                })\r\n        }\r\n\r\n        function ItemDialog(props) {\r\n            return (\r\n                <div className={classes.itemDialog}>\r\n                    <span>{props.label}</span>\r\n                    <span style={{ fontWeight: '600', color: 'gray' }}>\r\n                        {props.data}\r\n                    </span>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                show={showDialogDelete}\r\n                onHide={() => setShowDialogDelete(false)}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <h5>Bạn có muốn xóa nhân viên này ?</h5>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div\r\n                        style={{\r\n                            padding: '0 30px',\r\n                        }}\r\n                    >\r\n                        <ItemDialog\r\n                            label=\"Tên nhân viên: \"\r\n                            data={nhanVien.HoTen}\r\n                        />\r\n                        <ItemDialog\r\n                            label=\"Giới tính: \"\r\n                            data={nhanVien.GioiTinh}\r\n                        />\r\n                        <ItemDialog label=\"Địa chỉ: \" data={nhanVien.DiaChi} />\r\n                        <ItemDialog\r\n                            label=\"Ngày sinh: \"\r\n                            data={nhanVien.NgaySinh}\r\n                        />\r\n                    </div>\r\n                    <hr></hr>\r\n\r\n                    <div>\r\n                        <h5>Yêu cầu nhập vào số điện thoại và mật khẩu</h5>\r\n                    </div>\r\n                    <InputText\r\n                        type=\"number\"\r\n                        placeholder=\"Số điện thoại\"\r\n                        setInputContent={setSdt}\r\n                    />\r\n                    <InputText\r\n                        type=\"password\"\r\n                        placeholder=\"Mật khẩu\"\r\n                        setInputContent={setPass}\r\n                    />\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button\r\n                        variant=\"secondary\"\r\n                        onClick={() => setShowDialogDelete(false)}\r\n                    >\r\n                        Từ Chối\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        onClick={() => {\r\n                            if (\r\n                                validatedPhone(sdt) &&\r\n                                validatedPassword(pass)\r\n                            ) {\r\n                                delNhanVien()\r\n                                setShowDialogDelete(false)\r\n                                return\r\n                            }\r\n                        }}\r\n                    >\r\n                        Đồng Ý\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    function ModalDialogCreateNV() {\r\n        const [phone, setPhone] = useState()\r\n        const [hoTen, setHoTen] = useState()\r\n\r\n        function createNhanVien() {\r\n            if (window.fetch) {\r\n                fetch(URL_CREATE_NHANVIEN, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        SDT: phone,\r\n                        HoTen: hoTen,\r\n                    }),\r\n                })\r\n                    .then((response) => {\r\n                        return response.json()\r\n                    })\r\n                    .then((result) => {\r\n                        console.log(result)\r\n                        if (result.success) {\r\n                            setLoadDSNV(true)\r\n                            setShowMess(true)\r\n                            setTextMess('Thêm nhân viên thành công!')\r\n                            setSeverityMess('success')\r\n\r\n                            //Thêm thông báo thêm 1 nv thành công\r\n                            var objDate = new Date()\r\n                            const bodyNoti = {\r\n                                NoiDung: '1 nhân viên vừa được tạo',\r\n                                DateAdding: `${objDate.getFullYear()}-${\r\n                                    objDate.getMonth() + 1\r\n                                }-${objDate.getDate()}`,\r\n                                TimeAt: `${objDate.getHours()}:${objDate.getMinutes()}`,\r\n                            }\r\n                            pushNotify(bodyNoti, TOKEN)\r\n\r\n                            return\r\n                        } else {\r\n                            setShowMess(true)\r\n                            setTextMess(result.mess)\r\n                            setSeverityMess('error')\r\n                            return\r\n                        }\r\n                    })\r\n            } else {\r\n                console.log('fetch not found')\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                show={modalShowDialogCreateNV}\r\n                onHide={() => setModalShowDialogCreateNV(false)}\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <h3\r\n                        style={{\r\n                            color: 'black',\r\n                        }}\r\n                    >\r\n                        Thêm Nhân Viên\r\n                    </h3>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <InputText\r\n                        type=\"number\"\r\n                        placeholder=\"Số điện thoại\"\r\n                        setInputContent={setPhone}\r\n                    />\r\n                    <InputText\r\n                        placeholder=\"Họ và tên\"\r\n                        setInputContent={setHoTen}\r\n                    />\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button\r\n                        variant=\"secondary\"\r\n                        onClick={() => {\r\n                            setModalShowDialogCreateNV(false)\r\n                        }}\r\n                    >\r\n                        Đóng\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        onClick={() => {\r\n                            //check sdt đúng định dạng\r\n                            if (\r\n                                validatedPhone(phone) &&\r\n                                validatedText(hoTen, 'họ và tên')\r\n                            ) {\r\n                                createNhanVien()\r\n                                setModalShowDialogCreateNV(false)\r\n                                return\r\n                            }\r\n                        }}\r\n                    >\r\n                        Tạo\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <ModalDialogDelNV />\r\n            <ModalDialogCreateNV />\r\n            <ModalDialogUpdateNV />\r\n            <Snackbar\r\n                open={showMess}\r\n                autoHideDuration={3000}\r\n                onClose={() => {\r\n                    setShowMess(false)\r\n                }}\r\n            >\r\n                <Alert\r\n                    onClose={() => {\r\n                        setShowMess(false)\r\n                    }}\r\n                    severity={severityMess}\r\n                >\r\n                    {textMess}\r\n                </Alert>\r\n            </Snackbar>\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    margin: '20px 0',\r\n                }}\r\n            >\r\n                <h1 style={{ width: '100%', textAlign: 'center' }}>\r\n                    Danh Sách Nhân Viên\r\n                </h1>\r\n                {data_info_person.TypeNV == 2 ? (\r\n                    <Button\r\n                        style={{\r\n                            width: '200px',\r\n                            height: '50px',\r\n                            alignSelf: 'flex-end',\r\n                        }}\r\n                        onClick={() => {\r\n                            setModalShowDialogCreateNV(true)\r\n                        }}\r\n                    >\r\n                        Thêm Nhân Viên\r\n                    </Button>\r\n                ) : (\r\n                    <div></div>\r\n                )}\r\n            </div>\r\n            <Paper\r\n                style={{\r\n                    width: '100%',\r\n                }}\r\n            >\r\n                {loading ? (\r\n                    <div className={classes.iconLoad}>\r\n                        <Spinner animation=\"border\" />\r\n                    </div>\r\n                ) : (\r\n                    <div></div>\r\n                )}\r\n                {isNetWork ? (\r\n                    <div>\r\n                        <div className={classes.searchContainer}>\r\n                            <form className={classes.formSearch}>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Tìm Kiếm Nhân Viên\"\r\n                                    className={classes.inputSearch}\r\n                                    onChange={(event) => {\r\n                                        const textSearch = event.target.value.toLowerCase()\r\n                                        const regex = new RegExp(textSearch)\r\n\r\n                                        setUITableNhanVien(\r\n                                            dataDSNV.map((e) => {\r\n                                                if (\r\n                                                    regex.test(\r\n                                                        e.HoTen.toLowerCase()\r\n                                                    ) ||\r\n                                                    regex.test(\r\n                                                        e.GioiTinh.toLowerCase()\r\n                                                    ) ||\r\n                                                    regex.test(\r\n                                                        e.NgaySinh.toLowerCase()\r\n                                                    ) ||\r\n                                                    regex.test(\r\n                                                        e.DiaChi.toLowerCase()\r\n                                                    )\r\n                                                ) {\r\n                                                    return ItemNV(e)\r\n                                                }\r\n                                            })\r\n                                        )\r\n                                    }}\r\n                                />\r\n                                <SearchIcon className={classes.searchIcon} />\r\n                            </form>\r\n                        </div>\r\n                        <TableContainer\r\n                            style={{\r\n                                maxHeight: '65vh',\r\n                                width: '100%',\r\n                            }}\r\n                        >\r\n                            <Table stickyHeader aria-label=\"sticky table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>STT</TableCell>\r\n                                        <TableCell>Tên Nhân Viên</TableCell>\r\n                                        <TableCell>Giới Tính</TableCell>\r\n                                        <TableCell>Ngày Sinh</TableCell>\r\n                                        <TableCell>Địa Chỉ</TableCell>\r\n                                        <TableCell></TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>{UITableNhanVien}</TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </div>\r\n                ) : (\r\n                    <div className={classes.notNetWok}>\r\n                        Không có mạng, vui lòng thử lại\r\n                    </div>\r\n                )}\r\n            </Paper>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default DSNhanVien\r\nexport { lengthDSNV }\r\n",["250","251"],"C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\serviceWorker.js",[],["252","253"],"C:\\Users\\MINH HOANG\\Desktop\\QLNS\\do-an-QLNS\\src\\component\\SectionDashboard\\SectionDashboard.js",["254","255","256","257","258"],"import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { lengthDSNV } from '../../activity/MainActivity/Chil_Screens/DanhSachNhanVien'\r\nimport { lengthDSCT } from '../../activity/MainActivity/Chil_Screens/DanhSachCongTrinh'\r\n\r\nimport ModalWL from '../Modal/ModalWL'\r\n\r\n//dark mode\r\nimport { lightTheme, darkTheme } from '../../Theme/theme'\r\n\r\nimport { useSelector } from 'react-redux'\r\n\r\n//import icon react material ui\r\nimport EventIcon from '@material-ui/icons/Event'\r\nimport NotificationsIcon from '@material-ui/icons/Notifications'\r\nimport ListIcon from '@material-ui/icons/List'\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge'\r\nimport DateRangeIcon from '@material-ui/icons/DateRange'\r\nimport AssignmentIcon from '@material-ui/icons/Assignment'\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline'\r\nimport MonetizationOnOutlinedIcon from '@material-ui/icons/MonetizationOnOutlined'\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline'\r\n\r\n//import component react material ui\r\nimport Paper from '@material-ui/core/Paper'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\n//import component react bootstrap\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nfunction Section() {\r\n    const isDarkMode = useSelector((state) => state.isDarkMode)\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        title: {\r\n            width: '100%',\r\n            height: '40px',\r\n            fontWeight: '600',\r\n            fontSize: '22px',\r\n            color: isDarkMode ? 'gray' : darkTheme.text,\r\n            padding: '0 10px',\r\n            borderBottom: '1px solid #eee',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n        },\r\n        detailSinhVienContainer: {\r\n            width: '100%',\r\n            height: '100%',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            backgroundColor: isDarkMode ? 'white' : darkTheme.body,\r\n        },\r\n        imgSinhVien: {\r\n            height: '100%',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n        },\r\n        detail: {\r\n            display: 'flex',\r\n            width: '100%',\r\n            justifyContent: 'space-around',\r\n            alignItems: 'center',\r\n        },\r\n        detailSinhVienLeft: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'flex-start',\r\n        },\r\n        detailSinhVienRight: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'flex-start',\r\n        },\r\n        diemDanh: {\r\n            width: '50px',\r\n            height: '50px',\r\n            border: '1px solid gray',\r\n            boxShadow: '0px 0px 4px',\r\n            borderRadius: '50%',\r\n            cursor: 'pointer',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            fontSize: '30px',\r\n            alignItems: 'center',\r\n            transition: 'all .2s linear',\r\n            flex: '0 0 50px',\r\n            marginLeft: '50px',\r\n\r\n            '&:hover': {\r\n                color: '#007bff !important',\r\n            },\r\n        },\r\n        tutorial: {\r\n            position: 'absolute',\r\n            top: '100px',\r\n            right: '100px',\r\n            cursor: 'pointer',\r\n            color: 'gray',\r\n\r\n            '&:hover': {\r\n                color: '#33aef5',\r\n            },\r\n        },\r\n        DonutLargeIcon: {\r\n            fontSize: '40px',\r\n            color: '#337ab7',\r\n            marginBottom: '12px',\r\n        },\r\n        itemFeature: {\r\n            color: isDarkMode ? 'gray' : darkTheme.text,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            textAlign: 'center',\r\n            width: '100%',\r\n            lineHeight: '16px',\r\n            height: '100%',\r\n            transition: 'all 0.2s linear',\r\n            // '&:hover': {\r\n            //     boxShadow: '0 0 5px 2px',\r\n            // },\r\n        },\r\n        modalThongBaoBody: {\r\n            height: '500px',\r\n            overflowY: 'scroll',\r\n        },\r\n    }))\r\n\r\n    const classes = useStyles()\r\n\r\n    const TOKEN = sessionStorage.getItem('token')\r\n\r\n    const URP_API_GET_NOTIFYCATION =\r\n        'https://qlnscloud.herokuapp.com/notifycation/DanhSachThongBao?token='\r\n\r\n    const data_info_person = JSON.parse(sessionStorage.getItem('info'))\r\n\r\n    const [UIThongBao, setUIThongBao] = useState()\r\n    const [showTutorial, setShowTutorial] = useState(false)\r\n\r\n    const [modalShowThongBao, setModalShowThongBao] = useState(false)\r\n\r\n    const [lengthTB, setLengthTB] = useState()\r\n\r\n    const NGAY = [\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7,\r\n        8,\r\n        9,\r\n        10,\r\n        11,\r\n        12,\r\n        13,\r\n        14,\r\n        15,\r\n        16,\r\n        17,\r\n        18,\r\n        19,\r\n        20,\r\n        21,\r\n        22,\r\n        23,\r\n        24,\r\n        25,\r\n        26,\r\n        27,\r\n        28,\r\n        29,\r\n        30,\r\n        31,\r\n    ]\r\n\r\n    var srcImg = [\r\n        require('../../resource/HinhAnh/2.jpg'),\r\n        require('../../resource/HinhAnh/3.jpg'),\r\n        require('../../resource/HinhAnh/4.jpg'),\r\n        require('../../resource/HinhAnh/5.jpg'),\r\n        require('../../resource/HinhAnh/6.jpg'),\r\n        require('../../resource/HinhAnh/7.jpg'),\r\n    ]\r\n\r\n    function getNotify() {\r\n        if (window.fetch) {\r\n            fetch(URP_API_GET_NOTIFYCATION + TOKEN)\r\n                .then((response) => {\r\n                    return response.json()\r\n                })\r\n                .then((result) => {\r\n                    setLengthTB(result.data.length)\r\n                    RenderUIThongBao(result.data)\r\n                    // console.log(result.data)\r\n                })\r\n                .catch((error) => {\r\n                    console.log('Lỗi', error)\r\n                })\r\n        } else {\r\n            console.log('fetch not found')\r\n        }\r\n    }\r\n\r\n    function RenderUIThongBao(data) {\r\n        var bgItemTB = true\r\n        setUIThongBao(\r\n            data.map((e) => {\r\n                bgItemTB = !bgItemTB\r\n                return ItemThongBao(e, bgItemTB)\r\n            })\r\n        )\r\n    }\r\n\r\n    function ItemThongBao(props, bgItem) {\r\n        return (\r\n            <div\r\n                style={{\r\n                    backgroundColor: bgItem ? '#e4e6eb' : 'white',\r\n                    height: '50px',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    flexWrap: 'wrap',\r\n                    borderRadius: '5px',\r\n                    fontSize: '18px',\r\n                }}\r\n            >\r\n                <p\r\n                    style={{\r\n                        marginBottom: '0',\r\n                    }}\r\n                >\r\n                    {props.NoiDung} vào lúc\r\n                </p>\r\n                <span style={{ color: 'red' }}>\r\n                    {props.TimeAt}, {props.DateAdding}\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    useEffect(() => {\r\n        getNotify()\r\n    }, [])\r\n\r\n    function ViewDS(props) {\r\n        return (\r\n            <Paper\r\n                style={{\r\n                    padding: '15px',\r\n                    backgroundColor: `${props.bgColor}`,\r\n                }}\r\n            >\r\n                <p\r\n                    style={{\r\n                        fontSize: '13px',\r\n                        color: isDarkMode ? 'black' : darkTheme.text,\r\n                    }}\r\n                >\r\n                    {props.title}\r\n                </p>\r\n                <span\r\n                    style={{\r\n                        fontSize: '25px',\r\n                        paddingBottom: '10px',\r\n                        color: 'gray',\r\n                        fontWeight: '600',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'space-between',\r\n                    }}\r\n                >\r\n                    {props.sl}\r\n                    {props.icon}\r\n                </span>\r\n                <Link\r\n                    to={props.link}\r\n                    style={{\r\n                        textDecoration: 'none',\r\n                    }}\r\n                    onClick={props.onClick}\r\n                >\r\n                    Xem\r\n                </Link>\r\n            </Paper>\r\n        )\r\n    }\r\n\r\n    function ModalThongBao() {\r\n        return (\r\n            <Modal\r\n                show={modalShowThongBao}\r\n                onHide={() => setModalShowThongBao(false)}\r\n                size=\"lg\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                style={{ color: 'black' }}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <h5>Thông Báo</h5>\r\n                </Modal.Header>\r\n                <Modal.Body className={classes.modalThongBaoBody}>\r\n                    {UIThongBao}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button\r\n                        onClick={() => {\r\n                            setModalShowThongBao(false)\r\n                        }}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    function ItemDiemDanh(props) {\r\n        const [checkedDiemDanh, setCheckedDiemDanh] = useState(false)\r\n        // console.log(checkedDiemDanh)\r\n        return (\r\n            <label\r\n                for={props.date}\r\n                className={classes.diemDanh}\r\n                style={{\r\n                    backgroundColor: checkedDiemDanh\r\n                        ? 'rgb(51, 122, 183)'\r\n                        : 'white',\r\n                    color: checkedDiemDanh ? 'white' : 'black',\r\n                }}\r\n            >\r\n                {props.date}\r\n                <input\r\n                    id={props.date}\r\n                    type=\"checkbox\"\r\n                    value={props.date}\r\n                    onChange={(e) => {\r\n                        setCheckedDiemDanh(!checkedDiemDanh)\r\n                    }}\r\n                    checked={checkedDiemDanh}\r\n                    hidden\r\n                />\r\n            </label>\r\n        )\r\n    }\r\n\r\n    function Viewother(props) {\r\n        return (\r\n            <Paper\r\n                style={{\r\n                    height: '110px',\r\n                    backgroundColor: isDarkMode ? 'white' : darkTheme.body,\r\n                }}\r\n            >\r\n                <Link\r\n                    to={props.link}\r\n                    style={{\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        textDecoration: 'none',\r\n                        fontSize: '16px',\r\n                    }}\r\n                >\r\n                    <div className={classes.itemFeature}>\r\n                        {props.Icon}\r\n                        {props.txtView}\r\n                    </div>\r\n                </Link>\r\n            </Paper>\r\n        )\r\n    }\r\n\r\n    function ItemThongTinNV(props) {\r\n        return (\r\n            <label\r\n                style={{\r\n                    fontSize: '15px',\r\n                    fontWeight: '600',\r\n                    color: '#667580',\r\n                    margin: '12px 0',\r\n                }}\r\n            >\r\n                {props.dataName}\r\n                <span\r\n                    style={{\r\n                        fontWeight: '600',\r\n                        fontSize: '15px',\r\n                        color: isDarkMode ? lightTheme.text : darkTheme.text,\r\n                    }}\r\n                >\r\n                    {props.data}\r\n                </span>\r\n            </label>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Container\r\n            fluid=\"md\"\r\n            style={{\r\n                marginTop: '13px',\r\n            }}\r\n        >\r\n            <ModalThongBao />\r\n\r\n            <Row style={{ height: '300px' }}>\r\n                <Col\r\n                    md={7}\r\n                    style={{\r\n                        height: '100%',\r\n                    }}\r\n                >\r\n                    <Paper className={classes.detailSinhVienContainer}>\r\n                        <div className={classes.title}>Thông tin cá nhân</div>\r\n                        <Row\r\n                            style={{\r\n                                height: ' 100%',\r\n                            }}\r\n                        >\r\n                            <Col\r\n                                md={4}\r\n                                xl={4}\r\n                                lg={4}\r\n                                className={classes.imgSinhVien}\r\n                            >\r\n                                <img\r\n                                    src={data_info_person.Avatar}\r\n                                    style={{\r\n                                        width: '100px',\r\n                                        height: '100px',\r\n                                        borderRadius: '50%',\r\n                                        marginBottom: '7px',\r\n                                        objectFit: 'cover',\r\n                                        backgroundColor: 'white',\r\n                                    }}\r\n                                />\r\n                                <Link\r\n                                    to=\"/Dashboard/ChiTietNhanVien\"\r\n                                    style={{\r\n                                        textDecoration: 'none',\r\n                                        fontSize: '14px',\r\n                                    }}\r\n                                >\r\n                                    Xem chi tiết\r\n                                </Link>\r\n                            </Col>\r\n                            <Col\r\n                                md={8}\r\n                                xl={8}\r\n                                lg={8}\r\n                                className={classes.detail}\r\n                            >\r\n                                <div className={classes.detailSinhVienLeft}>\r\n                                    <ItemThongTinNV\r\n                                        dataName=\"Họ Tên: \"\r\n                                        data={data_info_person.HoTen}\r\n                                    />\r\n                                    <ItemThongTinNV\r\n                                        dataName=\"Mã Số: \"\r\n                                        data={data_info_person.MaNV}\r\n                                    />\r\n                                    <ItemThongTinNV\r\n                                        dataName=\"Mã Phòng Ban: \"\r\n                                        data={data_info_person.MaPB}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.detailSinhVienRight}>\r\n                                    <ItemThongTinNV\r\n                                        dataName=\"Mã Chức Vụ: \"\r\n                                        data={data_info_person.MaCV}\r\n                                    />\r\n                                    <ItemThongTinNV\r\n                                        dataName=\"Giới Tính: \"\r\n                                        data={data_info_person.GioiTinh}\r\n                                    />\r\n                                    <ItemThongTinNV\r\n                                        dataName=\"Ngày Sinh: \"\r\n                                        data={data_info_person.NgaySinh}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Paper>\r\n                </Col>\r\n\r\n                <Col\r\n                    md={5}\r\n                    style={{\r\n                        height: '100%',\r\n                    }}\r\n                >\r\n                    <Row\r\n                        style={{\r\n                            height: '100%',\r\n                        }}\r\n                    >\r\n                        <Col\r\n                            md={12}\r\n                            style={{\r\n                                marginBottom: '25px',\r\n                            }}\r\n                        >\r\n                            <ViewDS\r\n                                title=\"Thông Báo\"\r\n                                sl={lengthTB ? lengthTB : '0'}\r\n                                bgColor={isDarkMode ? 'white' : darkTheme.body}\r\n                                onClick={() => {\r\n                                    setModalShowThongBao(true)\r\n                                    console.log('Show thong bao')\r\n                                }}\r\n                                icon={\r\n                                    <NotificationsIcon\r\n                                        style={{ fontSize: '30px' }}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </Col>\r\n\r\n                        <Col md={6}>\r\n                            <ViewDS\r\n                                title=\"Xem Danh Sách Nhân Viên\"\r\n                                sl={lengthDSNV ? lengthDSNV : '0'}\r\n                                bgColor={\r\n                                    isDarkMode ? '#e0fbff' : darkTheme.body\r\n                                }\r\n                                link=\"/Dashboard/DanhSachNhanVien\"\r\n                                icon={<ListIcon style={{ fontSize: '30px' }} />}\r\n                            />\r\n                        </Col>\r\n\r\n                        <Col md={6}>\r\n                            <ViewDS\r\n                                title=\"Xem Danh Sách Công Trình\"\r\n                                sl={lengthDSCT ? lengthDSCT : '0'}\r\n                                bgColor={\r\n                                    isDarkMode ? '#fff2d4' : darkTheme.body\r\n                                }\r\n                                link=\"/Dashboard/DanhSachCongTrinh\"\r\n                                icon={<ListIcon style={{ fontSize: '30px' }} />}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row\r\n                style={{\r\n                    marginTop: '20px',\r\n                }}\r\n            >\r\n                <Col md={3}>\r\n                    <Viewother\r\n                        txtView=\"Báo cáo tiến độ công trình\"\r\n                        link=\"/Dashboard/TienDoCongTrinh\"\r\n                        Icon={\r\n                            <DonutLargeIcon\r\n                                className={classes.DonutLargeIcon}\r\n                            />\r\n                        }\r\n                    />\r\n                </Col>\r\n                <Col md={3}>\r\n                    <Viewother\r\n                        txtView=\"Phân Công Nhân Viên\"\r\n                        link=\"/Dashboard/PhanCongNhanVien\"\r\n                        Icon={\r\n                            <DateRangeIcon className={classes.DonutLargeIcon} />\r\n                        }\r\n                    />\r\n                </Col>\r\n                <Col md={3}>\r\n                    <Viewother\r\n                        txtView=\"Bảng Lương\"\r\n                        link=\"/Dashboard/BangLuong\"\r\n                        Icon={\r\n                            <MonetizationOnOutlinedIcon\r\n                                className={classes.DonutLargeIcon}\r\n                            />\r\n                        }\r\n                    />\r\n                </Col>\r\n                <Col md={3}>\r\n                    <Viewother\r\n                        txtView=\"Danh sách công trình hoàn thành\"\r\n                        link=\"/Dashboard/DSHoanThanhCongTrinh\"\r\n                        Icon={\r\n                            <CheckCircleOutlineIcon\r\n                                className={classes.DonutLargeIcon}\r\n                            />\r\n                        }\r\n                    />\r\n                </Col>\r\n                {/* <Col md={2}>\r\n                    <Viewother\r\n                        txtView=\"Đang tiến hành\"\r\n                        Icon={\r\n                            <AssignmentIcon\r\n                                className={classes.DonutLargeIcon}\r\n\r\n                            />\r\n                        }\r\n                    />\r\n                </Col> */}\r\n                {/* <Col md={2}>\r\n                    <Viewother\r\n                        txtView=\"Đang tiến hành\"\r\n                        Icon={\r\n                            <DonutLargeIcon\r\n                                className={classes.DonutLargeIcon}\r\n                            />\r\n                        }\r\n                    />\r\n                </Col> */}\r\n            </Row>\r\n            {data_info_person.TypeNV == 1 ? (\r\n                <div\r\n                    style={{\r\n                        width: '100%',\r\n                        marginTop: '30px',\r\n                    }}\r\n                >\r\n                    <h3\r\n                        style={{\r\n                            textAlign: 'center',\r\n                        }}\r\n                    >\r\n                        Điểm danh ngày\r\n                    </h3>\r\n                    <div\r\n                        style={{\r\n                            width: '100%',\r\n                            height: '100px',\r\n                            display: 'flex',\r\n                            justifyItems: 'center',\r\n                            alignItems: 'center',\r\n                            overflowX: 'scroll',\r\n                        }}\r\n                    >\r\n                        {NGAY.map((e) => {\r\n                            return <ItemDiemDanh date={e} />\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <div></div>\r\n            )}\r\n            <HelpOutlineIcon\r\n                className={classes.tutorial}\r\n                onClick={() => {\r\n                    setShowTutorial(true)\r\n                }}\r\n                style={{\r\n                    cursor: 'pointer',\r\n                    marginRight: '35px',\r\n                    fontSize: '30px',\r\n                }}\r\n            />\r\n            <ModalWL\r\n                show={showTutorial}\r\n                setShow={setShowTutorial}\r\n                header={'Hướng dẫn sử dụng'}\r\n                srcImg={srcImg}\r\n                heightImg=\"500px\"\r\n                widthImg=\"100%\"\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Section\r\n",{"ruleId":"259","replacedBy":"260"},{"ruleId":"261","replacedBy":"262"},{"ruleId":"259","replacedBy":"263"},{"ruleId":"261","replacedBy":"264"},{"ruleId":"265","severity":1,"message":"266","line":6,"column":10,"nodeType":"267","messageId":"268","endLine":6,"endColumn":21},{"ruleId":"265","severity":1,"message":"269","line":14,"column":8,"nodeType":"267","messageId":"268","endLine":14,"endColumn":20},{"ruleId":"259","replacedBy":"270"},{"ruleId":"261","replacedBy":"271"},{"ruleId":"265","severity":1,"message":"272","line":3,"column":27,"nodeType":"267","messageId":"268","endLine":3,"endColumn":33},{"ruleId":"265","severity":1,"message":"273","line":3,"column":35,"nodeType":"267","messageId":"268","endLine":3,"endColumn":41},{"ruleId":"265","severity":1,"message":"274","line":3,"column":43,"nodeType":"267","messageId":"268","endLine":3,"endColumn":48},{"ruleId":"265","severity":1,"message":"275","line":3,"column":50,"nodeType":"267","messageId":"268","endLine":3,"endColumn":54},{"ruleId":"265","severity":1,"message":"276","line":9,"column":8,"nodeType":"267","messageId":"268","endLine":9,"endColumn":23},{"ruleId":"277","severity":1,"message":"278","line":33,"column":9,"nodeType":"279","messageId":"280","endLine":33,"endColumn":14},{"ruleId":"265","severity":1,"message":"281","line":1,"column":17,"nodeType":"267","messageId":"268","endLine":1,"endColumn":23},{"ruleId":"265","severity":1,"message":"282","line":7,"column":8,"nodeType":"267","messageId":"268","endLine":7,"endColumn":16},{"ruleId":"265","severity":1,"message":"275","line":9,"column":10,"nodeType":"267","messageId":"268","endLine":9,"endColumn":14},{"ruleId":"265","severity":1,"message":"283","line":33,"column":11,"nodeType":"267","messageId":"268","endLine":33,"endColumn":20},{"ruleId":"265","severity":1,"message":"284","line":1,"column":17,"nodeType":"267","messageId":"268","endLine":1,"endColumn":25},{"ruleId":"265","severity":1,"message":"285","line":10,"column":10,"nodeType":"267","messageId":"268","endLine":10,"endColumn":25},{"ruleId":"265","severity":1,"message":"286","line":31,"column":8,"nodeType":"267","messageId":"268","endLine":31,"endColumn":23},{"ruleId":"265","severity":1,"message":"287","line":32,"column":8,"nodeType":"267","messageId":"268","endLine":32,"endColumn":19},{"ruleId":"265","severity":1,"message":"288","line":59,"column":11,"nodeType":"267","messageId":"268","endLine":59,"endColumn":18},{"ruleId":"265","severity":1,"message":"289","line":62,"column":11,"nodeType":"267","messageId":"268","endLine":62,"endColumn":19},{"ruleId":"265","severity":1,"message":"290","line":64,"column":11,"nodeType":"267","messageId":"268","endLine":64,"endColumn":18},{"ruleId":"265","severity":1,"message":"291","line":4,"column":8,"nodeType":"267","messageId":"268","endLine":4,"endColumn":13},{"ruleId":"265","severity":1,"message":"292","line":5,"column":8,"nodeType":"267","messageId":"268","endLine":5,"endColumn":14},{"ruleId":"259","replacedBy":"293"},{"ruleId":"261","replacedBy":"294"},{"ruleId":"265","severity":1,"message":"295","line":1,"column":27,"nodeType":"267","messageId":"268","endLine":1,"endColumn":36},{"ruleId":"265","severity":1,"message":"275","line":2,"column":10,"nodeType":"267","messageId":"268","endLine":2,"endColumn":14},{"ruleId":"265","severity":1,"message":"296","line":21,"column":12,"nodeType":"267","messageId":"268","endLine":21,"endColumn":20},{"ruleId":"265","severity":1,"message":"297","line":21,"column":22,"nodeType":"267","messageId":"268","endLine":21,"endColumn":33},{"ruleId":"265","severity":1,"message":"298","line":164,"column":14,"nodeType":"267","messageId":"268","endLine":164,"endColumn":23},{"ruleId":"265","severity":1,"message":"299","line":6,"column":11,"nodeType":"267","messageId":"268","endLine":6,"endColumn":21},{"ruleId":"300","severity":1,"message":"301","line":11,"column":24,"nodeType":"302","messageId":"280","endLine":11,"endColumn":26},{"ruleId":"303","severity":1,"message":"304","line":12,"column":34,"nodeType":"305","messageId":"306","endLine":12,"endColumn":36},{"ruleId":"307","severity":1,"message":"308","line":32,"column":8,"nodeType":"309","endLine":32,"endColumn":10,"suggestions":"310"},{"ruleId":"265","severity":1,"message":"295","line":1,"column":27,"nodeType":"267","messageId":"268","endLine":1,"endColumn":36},{"ruleId":"265","severity":1,"message":"311","line":1,"column":38,"nodeType":"267","messageId":"268","endLine":1,"endColumn":45},{"ruleId":"312","severity":1,"message":"313","line":212,"column":25,"nodeType":"314","endLine":226,"endColumn":27},{"ruleId":"265","severity":1,"message":"315","line":3,"column":8,"nodeType":"267","messageId":"268","endLine":3,"endColumn":17},{"ruleId":"265","severity":1,"message":"316","line":8,"column":5,"nodeType":"267","messageId":"268","endLine":8,"endColumn":19},{"ruleId":"265","severity":1,"message":"317","line":9,"column":5,"nodeType":"267","messageId":"268","endLine":9,"endColumn":22},{"ruleId":"265","severity":1,"message":"318","line":10,"column":5,"nodeType":"267","messageId":"268","endLine":10,"endColumn":18},{"ruleId":"265","severity":1,"message":"319","line":35,"column":8,"nodeType":"267","messageId":"268","endLine":35,"endColumn":14},{"ruleId":"265","severity":1,"message":"320","line":36,"column":8,"nodeType":"267","messageId":"268","endLine":36,"endColumn":11},{"ruleId":"265","severity":1,"message":"321","line":103,"column":12,"nodeType":"267","messageId":"268","endLine":103,"endColumn":22},{"ruleId":"265","severity":1,"message":"322","line":104,"column":12,"nodeType":"267","messageId":"268","endLine":104,"endColumn":23},{"ruleId":"265","severity":1,"message":"323","line":104,"column":25,"nodeType":"267","messageId":"268","endLine":104,"endColumn":39},{"ruleId":"265","severity":1,"message":"324","line":121,"column":12,"nodeType":"267","messageId":"268","endLine":121,"endColumn":32},{"ruleId":"265","severity":1,"message":"325","line":121,"column":34,"nodeType":"267","messageId":"268","endLine":121,"endColumn":57},{"ruleId":"265","severity":1,"message":"326","line":122,"column":12,"nodeType":"267","messageId":"268","endLine":122,"endColumn":35},{"ruleId":"265","severity":1,"message":"327","line":122,"column":37,"nodeType":"267","messageId":"268","endLine":122,"endColumn":63},{"ruleId":"307","severity":1,"message":"328","line":189,"column":8,"nodeType":"309","endLine":189,"endColumn":18,"suggestions":"329"},{"ruleId":"300","severity":1,"message":"330","line":208,"column":36,"nodeType":"302","messageId":"280","endLine":208,"endColumn":38},{"ruleId":"300","severity":1,"message":"330","line":219,"column":41,"nodeType":"302","messageId":"280","endLine":219,"endColumn":43},{"ruleId":"303","severity":1,"message":"331","line":514,"column":65,"nodeType":"305","messageId":"332","endLine":514,"endColumn":67},{"ruleId":"265","severity":1,"message":"292","line":5,"column":8,"nodeType":"267","messageId":"268","endLine":5,"endColumn":14},{"ruleId":"307","severity":1,"message":"333","line":95,"column":8,"nodeType":"309","endLine":95,"endColumn":10,"suggestions":"334"},{"ruleId":"303","severity":1,"message":"331","line":99,"column":26,"nodeType":"305","messageId":"332","endLine":99,"endColumn":28},{"ruleId":"300","severity":1,"message":"330","line":100,"column":30,"nodeType":"302","messageId":"280","endLine":100,"endColumn":32},{"ruleId":"303","severity":1,"message":"331","line":106,"column":26,"nodeType":"305","messageId":"332","endLine":106,"endColumn":28},{"ruleId":"300","severity":1,"message":"330","line":107,"column":30,"nodeType":"302","messageId":"280","endLine":107,"endColumn":32},{"ruleId":"303","severity":1,"message":"331","line":162,"column":56,"nodeType":"305","messageId":"332","endLine":162,"endColumn":58},{"ruleId":"265","severity":1,"message":"295","line":2,"column":27,"nodeType":"267","messageId":"268","endLine":2,"endColumn":36},{"ruleId":"265","severity":1,"message":"335","line":3,"column":23,"nodeType":"267","messageId":"268","endLine":3,"endColumn":30},{"ruleId":"265","severity":1,"message":"336","line":21,"column":8,"nodeType":"267","messageId":"268","endLine":21,"endColumn":18},{"ruleId":"300","severity":1,"message":"330","line":223,"column":57,"nodeType":"302","messageId":"280","endLine":223,"endColumn":59},{"ruleId":"312","severity":1,"message":"313","line":309,"column":25,"nodeType":"314","endLine":319,"endColumn":27},{"ruleId":"300","severity":1,"message":"330","line":364,"column":55,"nodeType":"302","messageId":"280","endLine":364,"endColumn":57},{"ruleId":"300","severity":1,"message":"330","line":575,"column":58,"nodeType":"302","messageId":"280","endLine":575,"endColumn":60},{"ruleId":"300","severity":1,"message":"330","line":577,"column":63,"nodeType":"302","messageId":"280","endLine":577,"endColumn":65},{"ruleId":"265","severity":1,"message":"337","line":18,"column":8,"nodeType":"267","messageId":"268","endLine":18,"endColumn":17},{"ruleId":"265","severity":1,"message":"338","line":4,"column":8,"nodeType":"267","messageId":"268","endLine":4,"endColumn":30},{"ruleId":"307","severity":1,"message":"339","line":139,"column":8,"nodeType":"309","endLine":139,"endColumn":18,"suggestions":"340"},{"ruleId":"300","severity":1,"message":"330","line":172,"column":42,"nodeType":"302","messageId":"280","endLine":172,"endColumn":44},{"ruleId":"303","severity":1,"message":"331","line":292,"column":62,"nodeType":"305","messageId":"332","endLine":292,"endColumn":64},{"ruleId":"259","replacedBy":"341"},{"ruleId":"261","replacedBy":"342"},{"ruleId":"265","severity":1,"message":"281","line":1,"column":38,"nodeType":"267","messageId":"268","endLine":1,"endColumn":44},{"ruleId":"265","severity":1,"message":"316","line":8,"column":5,"nodeType":"267","messageId":"268","endLine":8,"endColumn":19},{"ruleId":"265","severity":1,"message":"317","line":9,"column":5,"nodeType":"267","messageId":"268","endLine":9,"endColumn":22},{"ruleId":"307","severity":1,"message":"339","line":159,"column":8,"nodeType":"309","endLine":159,"endColumn":18,"suggestions":"343"},{"ruleId":"300","severity":1,"message":"330","line":176,"column":42,"nodeType":"302","messageId":"280","endLine":176,"endColumn":44},{"ruleId":"300","severity":1,"message":"330","line":722,"column":42,"nodeType":"302","messageId":"280","endLine":722,"endColumn":44},{"ruleId":"303","severity":1,"message":"331","line":761,"column":62,"nodeType":"305","messageId":"332","endLine":761,"endColumn":64},{"ruleId":"265","severity":1,"message":"281","line":1,"column":38,"nodeType":"267","messageId":"268","endLine":1,"endColumn":44},{"ruleId":"265","severity":1,"message":"292","line":5,"column":8,"nodeType":"267","messageId":"268","endLine":5,"endColumn":14},{"ruleId":"265","severity":1,"message":"344","line":11,"column":8,"nodeType":"267","messageId":"268","endLine":11,"endColumn":16},{"ruleId":"307","severity":1,"message":"345","line":130,"column":8,"nodeType":"309","endLine":130,"endColumn":18,"suggestions":"346"},{"ruleId":"300","severity":1,"message":"330","line":146,"column":36,"nodeType":"302","messageId":"280","endLine":146,"endColumn":38},{"ruleId":"303","severity":1,"message":"331","line":202,"column":69,"nodeType":"305","messageId":"332","endLine":202,"endColumn":71},{"ruleId":"300","severity":1,"message":"330","line":5,"column":42,"nodeType":"302","messageId":"280","endLine":5,"endColumn":44},{"ruleId":"265","severity":1,"message":"281","line":1,"column":38,"nodeType":"267","messageId":"268","endLine":1,"endColumn":44},{"ruleId":"265","severity":1,"message":"288","line":133,"column":9,"nodeType":"267","messageId":"268","endLine":133,"endColumn":16},{"ruleId":"307","severity":1,"message":"347","line":175,"column":8,"nodeType":"309","endLine":175,"endColumn":18,"suggestions":"348"},{"ruleId":"300","severity":1,"message":"330","line":187,"column":42,"nodeType":"302","messageId":"280","endLine":187,"endColumn":44},{"ruleId":"300","severity":1,"message":"330","line":663,"column":42,"nodeType":"302","messageId":"280","endLine":663,"endColumn":44},{"ruleId":"303","severity":1,"message":"331","line":705,"column":62,"nodeType":"305","messageId":"332","endLine":705,"endColumn":64},{"ruleId":"259","replacedBy":"349"},{"ruleId":"261","replacedBy":"350"},{"ruleId":"259","replacedBy":"351"},{"ruleId":"261","replacedBy":"352"},{"ruleId":"265","severity":1,"message":"353","line":15,"column":8,"nodeType":"267","messageId":"268","endLine":15,"endColumn":17},{"ruleId":"265","severity":1,"message":"354","line":20,"column":8,"nodeType":"267","messageId":"268","endLine":20,"endColumn":22},{"ruleId":"307","severity":1,"message":"355","line":257,"column":8,"nodeType":"309","endLine":257,"endColumn":10,"suggestions":"356"},{"ruleId":"312","severity":1,"message":"313","line":439,"column":33,"nodeType":"314","endLine":449,"endColumn":35},{"ruleId":"300","severity":1,"message":"330","line":628,"column":38,"nodeType":"302","messageId":"280","endLine":628,"endColumn":40},"no-native-reassign",["357"],"no-negated-in-lhs",["358"],["357"],["358"],"no-unused-vars","'useSelector' is defined but never used.","Identifier","unusedVar","'BaoCaoTienDo' is defined but never used.",["357"],["358"],"'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'HelpOutlineIcon' is defined but never used.","no-dupe-keys","Duplicate key 'color'.","ObjectExpression","unexpected","'useRef' is defined but never used.","'TextForm' is defined but never used.","'styleFlex' is assigned a value but never used.","'useState' is defined but never used.","'DARK_LIGHT_MODE' is defined but never used.","'Brightness2Icon' is defined but never used.","'WbSunnyIcon' is defined but never used.","'history' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'classes' is assigned a value but never used.","'Modal' is defined but never used.","'Button' is defined but never used.",["357"],["358"],"'useEffect' is defined but never used.","'keyPress' is assigned a value but never used.","'setKeyPress' is assigned a value but never used.","'resetPass' is defined but never used.","'handleShow' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: '_renderImg'. Either include it or remove the dependency array.","ArrayExpression",["359"],"'useMemo' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'InputText' is defined but never used.","'validatedPhone' is defined but never used.","'validatedPassword' is defined but never used.","'validatedText' is defined but never used.","'Rating' is defined but never used.","'Box' is defined but never used.","'thongTinCT' is assigned a value but never used.","'valueRating' is assigned a value but never used.","'setValueRating' is assigned a value but never used.","'modalShowDialogDelNC' is assigned a value but never used.","'setModalShowDialogDelNC' is assigned a value but never used.","'modalShowDialogUpdateNC' is assigned a value but never used.","'setModalShowDialogUpdateNC' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getDanhSachCongTrinh' and 'getDanhSachNgayCong'. Either include them or remove the dependency array.",["360"],"Expected '===' and instead saw '=='.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useEffect has a missing dependency: 'getDanhSachCongTrinhHT'. Either include it or remove the dependency array.",["361"],"'connect' is defined but never used.","'PersonIcon' is defined but never used.","'CloseIcon' is defined but never used.","'ChiTietTienDoCongTrinh' is defined but never used.","React Hook useEffect has a missing dependency: 'getDanhSachCongTrinh'. Either include it or remove the dependency array.",["362"],["357"],["358"],["363"],"'Dropdown' is defined but never used.","React Hook useEffect has a missing dependency: 'getDanhSachBangLuong'. Either include it or remove the dependency array.",["364"],"React Hook useEffect has a missing dependency: 'getDanhSachNhanVien'. Either include it or remove the dependency array.",["365"],["357"],["358"],["357"],["358"],"'EventIcon' is defined but never used.","'AssignmentIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'getNotify'. Either include it or remove the dependency array.",["366"],"no-global-assign","no-unsafe-negation",{"desc":"367","fix":"368"},{"desc":"369","fix":"370"},{"desc":"371","fix":"372"},{"desc":"373","fix":"374"},{"desc":"375","fix":"376"},{"desc":"377","fix":"378"},{"desc":"379","fix":"380"},{"desc":"381","fix":"382"},"Update the dependencies array to be: [_renderImg]",{"range":"383","text":"384"},"Update the dependencies array to be: [getDanhSachCongTrinh, getDanhSachNgayCong, loadDSNC]",{"range":"385","text":"386"},"Update the dependencies array to be: [getDanhSachCongTrinhHT]",{"range":"387","text":"388"},"Update the dependencies array to be: [getDanhSachCongTrinh, loadDSTD]",{"range":"389","text":"390"},"Update the dependencies array to be: [getDanhSachCongTrinh, loadDSCT]",{"range":"391","text":"392"},"Update the dependencies array to be: [getDanhSachBangLuong, loadDSNV]",{"range":"393","text":"394"},"Update the dependencies array to be: [getDanhSachNhanVien, loadDSNV]",{"range":"395","text":"396"},"Update the dependencies array to be: [getNotify]",{"range":"397","text":"398"},[1033,1035],"[_renderImg]",[5761,5771],"[getDanhSachCongTrinh, getDanhSachNgayCong, loadDSNC]",[2842,2844],"[getDanhSachCongTrinhHT]",[4350,4360],"[getDanhSachCongTrinh, loadDSTD]",[5033,5043],"[getDanhSachCongTrinh, loadDSCT]",[3902,3912],"[getDanhSachBangLuong, loadDSNV]",[5274,5284],"[getDanhSachNhanVien, loadDSNV]",[7496,7498],"[getNotify]"]